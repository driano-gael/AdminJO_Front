/**
 * Types et interfaces pour la gestion des √©v√©nements sportifs AdminJO
 *
 * Ce module d√©finit les structures de donn√©es pour la gestion compl√®te des √©v√©nements
 * sportifs des Jeux Olympiques 2024, incluant les √©v√©nements de base et leurs
 * extensions avec m√©tadonn√©es suppl√©mentaires pour l'interface d'administration.
 *
 * @module EvenementTypes
 * @category Types - SportEvenement
 * @since 1.0.0
 */

import { Epreuve } from './epreuve';
import { Lieu } from './lieu';

/**
 * Interface de base pour un √©v√©nement sportif des JO 2024
 *
 * Cette interface d√©finit la structure minimale d'un √©v√©nement sportif tel que
 * stock√© dans la base de donn√©es. Elle contient les informations essentielles
 * requises pour identifier et planifier un √©v√©nement olympique.
 *
 * ## Propri√©t√©s principales
 *
 * - **Identification** : ID unique et description de l'√©v√©nement
 * - **Localisation** : Lieu de comp√©tition avec toutes ses caract√©ristiques
 * - **Planification** : Date et horaire de l'√©v√©nement
 * - **√âpreuves** : Liste des comp√©titions incluses dans cet √©v√©nement
 *
 * ## Utilisation typique
 *
 * Cette interface est utilis√©e pour :
 * - Les op√©rations CRUD via l'API backend
 * - Le stockage en base de donn√©es
 * - Les √©changes de donn√©es entre services
 * - La validation des donn√©es d'entr√©e
 *
 * @interface Evenement
 * @category SportEvenement
 *
 * @example
 * ```typescript
 * const finaleNatation: Evenement = {
 *   id: 1,
 *   description: "Finale 100m Nage Libre Hommes",
 *   lieu: {
 *     id: 1,
 *     nom: "Centre Aquatique",
 *     adresse: "Saint-Denis, France",
 *     capacite: 15000
 *   },
 *   date: "2024-08-01",
 *   horraire: "20:30",
 *   epreuves: [
 *     {
 *       id: 5,
 *       libelle: "100m Nage Libre Hommes",
 *       discipline: { id: 2, nom: "Natation" }
 *     }
 *   ]
 * };
 * ```
 */
export interface Evenement {
  /**
   * Identifiant unique de l'√©v√©nement
   *
   * Cl√© primaire auto-g√©n√©r√©e par la base de donn√©es.
   * Utilis√©e pour toutes les op√©rations CRUD et les r√©f√©rences crois√©es.
   *
   * @example 1, 2, 3...
   */
  id: number;

  /**
   * Description d√©taill√©e de l'√©v√©nement
   *
   * Texte libre d√©crivant l'√©v√©nement sportif. Inclut g√©n√©ralement
   * le type de comp√©tition, la cat√©gorie et les sp√©cificit√©s.
   *
   * @example "Finale 100m Nage Libre Hommes", "Qualifications Basketball Femmes"
   */
  description: string;

  /**
   * Lieu de comp√©tition
   *
   * R√©f√©rence compl√®te au site o√π se d√©roule l'√©v√©nement, incluant
   * toutes les informations de capacit√© et de localisation.
   *
   * @see {@link Lieu} - Structure d√©taill√©e du lieu
   */
  lieu: Lieu;

  /**
   * Date de l'√©v√©nement
   *
   * Date au format ISO (YYYY-MM-DD) indiquant le jour de l'√©v√©nement.
   * Utilis√©e pour le filtrage temporel et la planification.
   *
   * @example "2024-08-01", "2024-07-26"
   */
  date: string;

  /**
   * Horaire de d√©but de l'√©v√©nement
   *
   * Heure au format HH:MM indiquant le d√©but pr√©vu de l'√©v√©nement.
   * Permet la planification pr√©cise et la gestion des conflits.
   *
   * @example "20:30", "14:15", "09:00"
   */
  horraire: string;

  /**
   * Liste des √©preuves incluses dans l'√©v√©nement
   *
   * Un √©v√©nement peut inclure plusieurs √©preuves (ex: plusieurs courses
   * dans une m√™me session). Chaque √©preuve a sa propre discipline et
   * ses caract√©ristiques sp√©cifiques.
   *
   * @see {@link Epreuve} - Structure d√©taill√©e d'une √©preuve
   */
  epreuves: Epreuve[];
}

/**
 * √ânum√©ration des statuts possibles d'un √©v√©nement sportif
 *
 * Ces statuts permettent de suivre l'√©tat d'avancement des √©v√©nements
 * et d'adapter l'interface utilisateur en cons√©quence.
 *
 * @enum {string}
 * @category SportEvenement
 */
export enum StatutEvenement {
  /** √âv√©nement planifi√© mais pas encore commenc√© */
  A_VENIR = '√† venir',
  /** √âv√©nement actuellement en cours */
  EN_COURS = 'en cours',
  /** √âv√©nement termin√© avec r√©sultats disponibles */
  TERMINE = 'termin√©',
  /** √âv√©nement annul√© pour cause exceptionnelle */
  ANNULE = 'annul√©'
}

/**
 * Interface √©tendue pour un √©v√©nement sportif avec m√©tadonn√©es d'administration
 *
 * Cette interface √©tend l'√©v√©nement de base avec des propri√©t√©s suppl√©mentaires
 * n√©cessaires pour l'interface d'administration. Elle inclut des informations
 * calcul√©es, des statistiques et des m√©tadonn√©es pour am√©liorer l'exp√©rience
 * utilisateur dans l'application AdminJO.
 *
 * ## Extensions apport√©es
 *
 * ### üèÜ Informations sportives enrichies
 * - **Sports** : Libell√© des disciplines regroup√©es
 * - **Statut calcul√©** : √âtat automatique bas√© sur date/heure
 *
 * ### üìä Donn√©es de billetterie
 * - **Capacit√©** : Nombre maximum de spectateurs
 * - **Billets vendus** : Statistiques de vente en temps r√©el
 * - **Taux d'occupation** : Calcul automatique du pourcentage
 *
 * ### üé® Am√©liorations d'interface
 * - **Indicateurs visuels** : Couleurs bas√©es sur le statut
 * - **Tri et filtrage** : Propri√©t√©s optimis√©es pour l'affichage
 * - **Statistiques rapides** : M√©triques calcul√©es c√¥t√© client
 *
 * ## Utilisation dans l'interface
 *
 * Cette interface est principalement utilis√©e dans :
 * - Les listes d'√©v√©nements dans l'interface d'administration
 * - Les cartes de r√©sum√© avec statistiques
 * - Les filtres et syst√®mes de tri avanc√©s
 * - Les tableaux de bord avec m√©triques
 *
 * @interface ExtendEvenement
 * @extends Evenement
 * @category SportEvenement
 *
 * @example
 * ```typescript
 * const evenementAvecStats: ExtendEvenement = {
 *   // Propri√©t√©s de base de Evenement
 *   id: 1,
 *   description: "Finale 100m Nage Libre Hommes",
 *   lieu: centreAquatique,
 *   date: "2024-08-01",
 *   horraire: "20:30",
 *   epreuves: [epreuve100mNL],
 *
 *   // Extensions pour l'administration
 *   sports: "Natation",
 *   status: StatutEvenement.A_VENIR,
 *   capacity: 15000,
 *   ticketsSold: 12500
 * };
 *
 * // Calcul du taux d'occupation
 * const tauxOccupation = evenementAvecStats.ticketsSold / evenementAvecStats.capacity * 100;
 * console.log(`Taux d'occupation: ${tauxOccupation}%`); // 83.33%
 * ```
 */
export interface ExtendEvenement extends Evenement {
  /**
   * Disciplines sportives pr√©sentes dans l'√©v√©nement (format texte)
   *
   * Cha√Æne de caract√®res regroupant les noms des disciplines pr√©sentes
   * dans cet √©v√©nement. Facilitie l'affichage et la recherche.
   * Cette propri√©t√© est optionnelle.
   *
   * @example "Natation", "Athl√©tisme", "Natation, Water-polo"
   */
  sports?: string;

  /**
   * Statut calcul√© de l'√©v√©nement
   *
   * √âtat automatiquement d√©termin√© en fonction de la date, de l'heure
   * et de l'heure actuelle. Utilis√© pour l'affichage conditionnel.
   * Cette propri√©t√© est optionnelle.
   *
   * @see {@link StatutEvenement} - √ânum√©ration des statuts possibles
   * @example StatutEvenement.A_VENIR, StatutEvenement.EN_COURS
   */
  status?: StatutEvenement;

  /**
   * Capacit√© maximale de spectateurs
   *
   * Nombre total de places disponibles pour cet √©v√©nement.
   * G√©n√©ralement h√©rit√© de la capacit√© du lieu, mais peut √™tre
   * ajust√© selon la configuration sp√©cifique de l'√©v√©nement.
   * Cette propri√©t√© est optionnelle.
   *
   * @example 15000, 80000, 5000
   */
  capacity?: number;

  /**
   * Nombre de billets vendus
   *
   * Compteur en temps r√©el des billets vendus pour cet √©v√©nement.
   * Utilis√© pour calculer le taux d'occupation et les statistiques
   * de vente. Cette propri√©t√© est optionnelle.
   *
   * @example 12500, 75000, 4200
   */
  ticketsSold?: number;
}

/**
 * Type utilitaire pour les filtres d'√©v√©nements
 *
 * Interface utilis√©e pour les requ√™tes de filtrage et de recherche
 * dans les listes d'√©v√©nements de l'interface d'administration.
 *
 * @interface EvenementFilters
 * @category SportEvenement
 */
export interface EvenementFilters {
  /** Filtrage par lieu de comp√©tition */
  lieu_id?: number;
  /** Filtrage par discipline sportive */
  discipline_id?: number;
  /** Filtrage par √©preuve sp√©cifique */
  epreuve_id?: number;
  /** Filtrage par statut d'√©v√©nement */
  status?: StatutEvenement;
  /** Filtrage par date de d√©but (inclusif) */
  date_debut?: string;
  /** Filtrage par date de fin (inclusif) */
  date_fin?: string;
  /** Recherche textuelle dans la description */
  search?: string;
}

/**
 * Type pour les statistiques d'√©v√©nements
 *
 * Structure des donn√©es statistiques calcul√©es pour un ensemble
 * d'√©v√©nements, utilis√©e dans les tableaux de bord.
 *
 * @interface EvenementStats
 * @category SportEvenement
 */
export interface EvenementStats {
  /** Nombre total d'√©v√©nements */
  total: number;
  /** Nombre d'√©v√©nements √† venir */
  aVenir: number;
  /** Nombre d'√©v√©nements en cours */
  enCours: number;
  /** Nombre d'√©v√©nements termin√©s */
  termines: number;
  /** Nombre d'√©v√©nements annul√©s */
  annules: number;
  /** Taux d'occupation moyen */
  tauxOccupationMoyen: number;
  /** Nombre total de billets vendus */
  billetsVendusTotal: number;
  /** Capacit√© totale de tous les √©v√©nements */
  capaciteTotale: number;
}