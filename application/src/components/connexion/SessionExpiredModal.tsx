/**
 * Composant SessionExpiredModal - Modal expiration session AdminJO
 *
 * Ce composant modal critique g√®re l'expiration des sessions administrateur dans l'application
 * AdminJO des Jeux Olympiques 2024. Il fournit une interface utilisateur claire pour informer
 * les administrateurs de l'expiration de leur session avec compte √† rebours automatique,
 * redirection programm√©e, et options de reconnexion imm√©diate. Con√ßu pour maintenir la
 * s√©curit√© des syst√®mes olympiques tout en pr√©servant l'exp√©rience utilisateur, il int√®gre
 * feedback visuel temps r√©el, gestion automatique des timeouts, et actions utilisateur
 * flexibles pour une gestion optimale des sessions expir√©es dans l'√©cosyst√®me AdminJO.
 *
 * ## Architecture modal et gestion session expir√©e
 *
 * ### ‚è∞ Syst√®me de compte √† rebours automatique
 * - **Dur√©e initiale** : 10 secondes countdown par d√©faut
 * - **Timer automatique** : setInterval d√©cr√©ment chaque seconde
 * - **Redirection automatique** : onReconnect() d√©clench√© √† countdown = 0
 * - **Reset intelligent** : R√©initialisation countdown si modal ferm√©/rouvert
 * - **Cleanup robuste** : clearInterval dans useEffect cleanup
 * - **√âtat synchronis√©** : countdown useState avec timer c√¥t√© effect
 * - **Performance** : Timer actif uniquement si modal ouvert
 *
 * ### üõ°Ô∏è Workflow expiration session s√©curis√©e
 * 1. **D√©tection expiration** : AuthContext/useAuth d√©tecte token expir√©
 * 2. **Ouverture modal** : isOpen=true d√©clenche affichage modal
 * 3. **Compte √† rebours** : 10 secondes timer avec affichage temps restant
 * 4. **Options utilisateur** : Fermer modal OU reconnexion imm√©diate
 * 5. **Redirection automatique** : onReconnect() si countdown atteint 0
 * 6. **Cleanup session** : Nettoyage tokens et redirection LoginAdminForm
 * 7. **Reset √©tat** : Fermeture modal remet countdown √† 10 secondes
 *
 * ## Interface utilisateur et exp√©rience modal
 *
 * ### üé® Design modal et feedback visuel
 * - **Overlay backdrop** : fixed inset-0 bg-black bg-opacity-50 isolation
 * - **Modal centr√©** : flex items-center justify-center viewport complet
 * - **Card √©l√©gante** : bg-white rounded-lg shadow avec max-w-md
 * - **Ic√¥ne contextuelle** : ‚è∞ emoji 6xl pour identification imm√©diate
 * - **Titre explicite** : "Session expir√©e" text-xl font-semibold
 * - **Message dynamique** : Texte avec countdown int√©gr√© temps r√©el
 * - **Actions claires** : Boutons Fermer (secondaire) + Se reconnecter (primaire)
 *
 * ### üì± Layout responsive et accessibilit√©
 * - **Mobile-friendly** : w-full max-w-md mx-4 pour adaptation √©crans
 * - **Touch targets** : Boutons px-4 py-2 dimensionn√©s interaction tactile
 * - **Text scaling** : Typography responsive text-xl/text-sm selon contexte
 * - **Z-index √©lev√©** : z-50 pour superposition garantie autres √©l√©ments
 * - **Container fluide** : Adaptation automatique largeurs √©cran
 * - **Center alignment** : text-center pour √©quilibre visuel optimal
 * - **Spacing coh√©rent** : p-6 padding + space-x-3 boutons harmonieux
 *
 * ## Gestion d'√©tat et lifecycle modal
 *
 * ### üîÑ √âtats et synchronisation countdown
 * - **countdown state** : useState<number> initialis√© √† 10 secondes
 * - **Timer effect** : useEffect avec setInterval pour d√©cr√©ment
 * - **Conditional reset** : countdown = 10 si modal ferm√© (!isOpen)
 * - **Auto-trigger** : onReconnect() appel√© automatiquement √† countdown = 0
 * - **Dependencies** : [isOpen, onReconnect] pour re-cr√©ation effect
 * - **Cleanup pattern** : return () => clearInterval() dans effect
 * - **State consistency** : countdown synchronis√© avec timer r√©el
 *
 * ### ‚ö° useEffect gestion timer sophistiqu√©e
 * - **Early return** : Pas de timer si !isOpen pour performance
 * - **setInterval** : Timer 1000ms (1 seconde) pour d√©cr√©ment r√©gulier
 * - **Functional update** : setCountdown(prev => ...) pour state stable
 * - **Trigger condition** : prev <= 1 d√©clenche onReconnect() + return 0
 * - **Normal decrement** : return prev - 1 pour countdown standard
 * - **Cleanup garantie** : clearInterval dans return function
 * - **Re-creation** : Effect re-cr√©√© si d√©pendances changent
 *
 * ## Actions utilisateur et callbacks
 *
 * ### üîò Actions disponibles pour utilisateur
 * - **Fermer modal** : onClose() sans redirection, maintient session expir√©e
 * - **Reconnexion imm√©diate** : onReconnect() bypass countdown, redirection login
 * - **Attendre countdown** : Aucune action, redirection automatique √† 0
 * - **Feedback visuel** : Boutons avec hover states et transitions
 * - **States interactifs** : hover:bg-gray-300 + hover:bg-blue-700
 * - **Accessibilit√©** : Textes explicites pour synth√®se vocale
 * - **Touch-friendly** : Zones clic optimis√©es mobile et desktop
 *
 * ### üì° Int√©gration callbacks externes
 * - **onClose prop** : Callback fermeture modal sans action suppl√©mentaire
 * - **onReconnect prop** : Callback redirection vers authentification
 * - **isOpen prop** : Contr√¥le externe affichage modal
 * - **Delegation pattern** : Logique m√©tier g√©r√©e par composants parents
 * - **State external** : Modal stateless pour logique session
 * - **Event propagation** : Actions remont√©es vers gestionnaires auth
 *
 * ## S√©curit√© et gestion session
 *
 * ### üîí Aspects s√©curit√© session expir√©e
 * - **Forced logout** : Modal appara√Æt apr√®s d√©tection expiration token
 * - **No bypass** : Pas d'√©chappatoire pour contourner expiration
 * - **Clear session** : onReconnect implique nettoyage tokens
 * - **User awareness** : Information claire expiration pour transparence
 * - **Timeout protection** : Limite exposition donn√©es apr√®s expiration
 * - **Audit trail** : Actions utilisateur tra√ßables pour s√©curit√©
 * - **Graceful handling** : UX fluide malgr√© contrainte s√©curitaire
 *
 * ### üõ°Ô∏è Protection contre usage non-autoris√©
 * - **Session invalidation** : Tokens invalid√©s c√¥t√© serveur
 * - **Forced re-auth** : Obligation authentification fresh
 * - **No cached access** : Pas d'acc√®s cached apr√®s expiration
 * - **Clear memory** : Nettoyage donn√©es sensibles localStorage
 * - **Redirect security** : Redirection vers LoginAdminForm s√©curis√©
 * - **Token cleanup** : Suppression tokens c√¥t√© client
 *
 * ## Performance et optimisations
 *
 * ### ‚ö° Optimisations timer et lifecycle
 * - **Conditional timer** : setInterval actif seulement si isOpen = true
 * - **Cleanup automatique** : clearInterval dans useEffect return
 * - **State functional** : setCountdown(prev => ...) √©vite stale closures
 * - **Minimal re-renders** : useEffect dependencies optimis√©es
 * - **Memory efficiency** : Pas de timer en arri√®re-plan si modal ferm√©
 * - **CPU efficiency** : Timer 1 seconde interval raisonnable
 * - **Component lightweight** : Logique minimale pour performance
 *
 * ### üéØ Candidats optimisation avanc√©e
 * - **React.memo** : M√©morisation si parent re-renders fr√©quents
 * - **useCallback** : M√©morisation handlers si pass√©s comme props
 * - **Precision timer** : requestAnimationFrame pour pr√©cision accrue
 * - **Background sync** : Web Workers si logique countdown complexe
 * - **Reduced motion** : respect prefers-reduced-motion pour animations
 * - **Visibility API** : Pause timer si onglet non-visible
 *
 * ## Responsive design et accessibilit√©
 *
 * ### üì± Adaptation multi-√©crans
 * - **Mobile optimization** : max-w-md + mx-4 marges s√©curit√© mobile
 * - **Tablet support** : Taille interm√©diaire bien g√©r√©e
 * - **Desktop enhancement** : Hover effects pour interactions pr√©cises
 * - **Portrait/landscape** : Fonctionnel toutes orientations
 * - **Small screens** : Contenu lisible m√™me √©crans √©troits
 * - **Touch gestures** : Boutons dimensionn√©s interaction tactile
 * - **Responsive text** : Typography adapt√©e taille √©cran
 *
 * ### ‚ôø Standards accessibilit√© et navigation
 * - **Modal semantics** : Structure modal accessible screen readers
 * - **Focus management** : Focus initial sur modal √† ouverture
 * - **Keyboard navigation** : Tab/Enter/Escape support complet
 * - **Screen reader** : Textes descriptifs lisibles synth√®se vocale
 * - **ARIA attributes** : Potentiel ajout role="dialog" aria-modal="true"
 * - **Color contrast** : Textes contrast√©s sur backgrounds
 * - **Text clarity** : Messages explicites sans ambigu√Øt√©
 * - **Action labels** : Boutons avec intents clairs
 *
 * ## Contexte m√©tier sessions AdminJO
 *
 * ### üèÖ Sp√©cificit√©s s√©curit√© olympique
 * - **Sessions courtes** : Expiration rapide pour s√©curit√© JO renforc√©e
 * - **Activit√© continue** : Administrateurs JO souvent actifs longtemps
 * - **Donn√©es sensibles** : Protection informations critiques JO
 * - **Audit compliance** : Tra√ßabilit√© sessions pour s√©curit√© olympique
 * - **Multi-user** : Gestion sessions multiples √©quipes organisatrices
 * - **High availability** : Disponibilit√© continue pendant √©v√©nements
 * - **Security standards** : Conformit√© standards CIO/s√©curit√© JO
 *
 * ### üìä Cas d'usage sessions AdminJO
 * - **Event management** : Sessions longues gestion √©v√©nements en temps r√©el
 * - **Media coordination** : Acc√®s prolong√© pour √©quipes m√©dias
 * - **Results input** : Sessions actives pendant comp√©titions
 * - **Logistics ops** : Coordination op√©rationnelle continue JO
 * - **Emergency access** : Re-authentification rapide situations urgentes
 * - **Multi-device** : Acc√®s depuis multiples appareils/locations
 *
 * ## Int√©gration √©cosyst√®me authentification
 *
 * ### üîå Communication avec syst√®me auth
 * - **AuthContext** : Modal d√©clench√©e par d√©tection expiration
 * - **AuthGuard** : Int√©gration avec protection routes
 * - **LoginAdminForm** : Redirection vers formulaire connexion
 * - **Token management** : Synchronisation avec gestion tokens
 * - **Session monitoring** : Part du syst√®me surveillance session
 * - **Error boundaries** : Gestion erreurs auth sans crash app
 *
 * ### üîÑ Workflow int√©gration complet
 * 1. **Token expiry** : useAuth/AuthContext d√©tecte expiration
 * 2. **Modal trigger** : Parent component set isOpen = true
 * 3. **User choice** : Fermer OU reconnexion imm√©diate OU attente
 * 4. **onReconnect** : Parent g√®re redirection LoginAdminForm
 * 5. **Session cleanup** : Nettoyage tokens et state auth
 * 6. **Fresh auth** : Nouvelle authentification requise
 *
 * ## Patterns d√©veloppement et extensibilit√©
 *
 * ### üèóÔ∏è Architecture patterns appliqu√©s
 * - **Controlled component** : Props contr√¥lent enti√®rement comportement
 * - **Callback delegation** : Logique m√©tier d√©l√©gu√©e parents
 * - **Single responsibility** : Focus unique gestion expiration UX
 * - **Composition over inheritance** : Modal composable avec autres
 * - **Immutable props** : Props non mut√©es par composant
 * - **Effect isolation** : useEffect cibl√© sur timer uniquement
 *
 * ### üîß Extensibilit√© et configuration
 * - **Countdown duration** : Actuellement 10s, facilement configurable
 * - **Custom messages** : Textes modifiables selon contexte
 * - **Action buttons** : Boutons ajoutables/configurables
 * - **Styling themes** : Couleurs/styles adaptables
 * - **Animation support** : Hooks pour animations entr√©e/sortie
 * - **Internationalization** : Textes externalisables pour i18n
 *
 * ## Limitations et am√©liorations futures
 *
 * ### ‚ùå Limitations actuelles identifi√©es
 * - **Fixed countdown** : 10 secondes hardcod√©es, pas configurable
 * - **No pause option** : Pas de bouton pause/resume countdown
 * - **Basic animations** : Pas d'animations entr√©e/sortie modal
 * - **Single language** : Textes fran√ßais uniquement
 * - **No progress bar** : Countdown textuel uniquement
 * - **No sound alerts** : Pas d'alertes audio expiration
 * - **Basic focus** : Focus management basique
 *
 * ### üöÄ Am√©liorations possibles prioritaires
 * - **Configurable countdown** : Props duration pour timer personnalis√©
 * - **Progress visualization** : Barre progression ou cercle countdown
 * - **Animation library** : Framer Motion pour transitions fluides
 * - **Sound notifications** : Alertes audio optionnelles
 * - **Pause functionality** : Bouton pause countdown si activit√©
 * - **Extension options** : Props extend session si possible
 * - **Keyboard shortcuts** : ESC fermer, Enter reconnexion
 * - **Auto-save warning** : Alerte donn√©es non-sauvegard√©es
 * - **Session analytics** : M√©triques dur√©e/fr√©quence expirations
 * - **Custom styling** : Props theme/className pour customisation
 *
 * ### üîß Am√©liorations techniques avanc√©es
 * - **Intersection Observer** : Pause timer si modal non-visible
 * - **Web Workers** : Timer en background thread si n√©cessaire
 * - **Local storage** : Sauvegarde √©tat countdown si refresh
 * - **Service Worker** : Notifications hors-ligne expiration
 * - **Websocket sync** : Synchronisation expiration multi-onglets
 * - **Advanced animations** : Micro-interactions et feedbacks
 * - **Accessibility++** : ARIA live regions pour annonces
 * - **Performance monitoring** : M√©triques usage modal
 *
 * @param {SessionExpiredModalProps} props - Configuration du modal expiration session
 * @param {boolean} props.isOpen - Contr√¥le affichage modal (true = visible)
 * @param {function} props.onClose - Callback fermeture modal sans redirection
 * @param {function} props.onReconnect - Callback redirection authentification
 *
 * @returns {JSX.Element|null} Modal expiration avec countdown ou null si ferm√©
 *
 * @see {@link useAuth} - Hook authentification d√©clenchant ce modal
 * @see {@link AuthGuard} - Composant protection utilisant expiration
 * @see {@link LoginAdminForm} - Destination apr√®s onReconnect
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Utilisation basique avec callbacks
 * const [sessionExpired, setSessionExpired] = useState(false);
 *
 * <SessionExpiredModal
 *   isOpen={sessionExpired}
 *   onClose={() => setSessionExpired(false)}
 *   onReconnect={() => {
 *     logout();
 *     router.push('/login');
 *   }}
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Int√©gration dans AuthContext
 * function AuthProvider({ children }) {
 *   const [showExpiredModal, setShowExpiredModal] = useState(false);
 *
 *   const handleSessionExpired = () => {
 *     setShowExpiredModal(true);
 *   };
 *
 *   const handleReconnect = () => {
 *     setShowExpiredModal(false);
 *     forceLogout();
 *     router.push('/login');
 *   };
 *
 *   return (
 *     <AuthContext.Provider value={{ handleSessionExpired }}>
 *       {children}
 *       <SessionExpiredModal
 *         isOpen={showExpiredModal}
 *         onClose={() => setShowExpiredModal(false)}
 *         onReconnect={handleReconnect}
 *       />
 *     </AuthContext.Provider>
 *   );
 * }
 * ```
 */

'use client';

import { useState, useEffect } from 'react';

/**
 * Interface des propri√©t√©s du composant SessionExpiredModal
 */
interface SessionExpiredModalProps {
  /** Contr√¥le l'affichage du modal - true pour visible, false pour cach√© */
  isOpen: boolean;
  /** Fonction appel√©e quand l'utilisateur ferme le modal sans redirection */
  onClose: () => void;
  /** Fonction appel√©e pour rediriger vers la page de connexion */
  onReconnect: () => void;
}

/**
 * Composant Modal qui s'affiche quand la session utilisateur expire
 * 
 * Fonctionnalit√©s :
 * - Affiche un compte √† rebours de 10 secondes
 * - Redirige automatiquement vers la page de connexion √† la fin du compte √† rebours
 * - Permet √† l'utilisateur de se reconnecter imm√©diatement ou de fermer le modal
 * 
 * @param props - Les propri√©t√©s du composant
 * @returns JSX.Element - Le modal de session expir√©e
 */
export default function SessionExpiredModal({ isOpen, onClose, onReconnect }: SessionExpiredModalProps) {
    
    // √âtat pour le compte √† rebours (10 secondes par d√©faut)
    const [countdown, setCountdown] = useState(10);
    
    // Effet pour g√©rer le compte √† rebours automatique
    useEffect(() => {
        // Si le modal n'est pas ouvert, r√©initialiser le compte √† rebours
        if (!isOpen) {
            setCountdown(10);
            return;
        }
        // Cr√©er un timer qui d√©cr√©mente le compte √† rebours chaque seconde
        const timer = setInterval(() => {
            setCountdown(prev => {
                // Si le compte √† rebours atteint 1, d√©clencher la reconnexion
                if (prev <= 1) {
                    onReconnect();
                    return 0;
                }
                // Sinon, d√©cr√©menter le compte √† rebours
                return prev - 1;
            });
        }, 1000);
        // Nettoyer le timer quand le composant se d√©monte ou que les d√©pendances changent
        return () => clearInterval(timer);
    }, [isOpen, onReconnect]); // D√©pendances : recr√©er l'effet si isOpen ou onReconnect change
    // Si le modal n'est pas ouvert, ne rien afficher
    if (!isOpen) return null;

    return (
        // Overlay sombre qui couvre toute la page
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            {/* Conteneur du modal */}
            <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4 text-center">
                {/* Ic√¥ne d'horloge */}
                <div className="text-6xl mb-4">‚è∞</div>
                
                {/* Titre du modal */}
                <h2 className="text-xl font-semibold text-gray-900 mb-4">
                    Session expir√©e
                </h2>
                
                {/* Message explicatif avec compte √† rebours dynamique */}
                <p className="text-gray-600 mb-6">
                    Votre session a expir√©. Vous allez √™tre redirig√© vers la page de connexion dans {countdown} secondes.
                </p>
                
                {/* Boutons d'action */}
                <div className="flex justify-center space-x-3">
                    {/* Bouton pour fermer le modal sans redirection */}
                    <button
                        onClick={onClose}
                        className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300 transition-colors"
                    >
                        Fermer
                    </button>
                    
                    {/* Bouton pour se reconnecter imm√©diatement */}
                    <button
                        onClick={onReconnect}
                        className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 transition-colors"
                    >
                        Se reconnecter maintenant
                    </button>
                </div>
            </div>
        </div>
    );
}
