/**
 * Composant AuthGuard - Protection avanc√©e des routes par authentification AdminJO
 *
 * Ce composant garde d'authentification sophistiqu√© prot√®ge les routes sensibles de l'application
 * AdminJO des Jeux Olympiques 2024 avec v√©rification continue de l'√©tat d'authentification,
 * gestion automatique du refresh des tokens, et transitions fluides entre √©tats authentifi√©s
 * et non-authentifi√©s. Con√ßu pour la s√©curit√© renforc√©e des syst√®mes olympiques, il assure
 * une protection robuste contre l'acc√®s non autoris√© tout en maintenant une exp√©rience
 * utilisateur fluide pour les administrateurs JO avec gestion intelligente des sessions
 * expir√©es et recovery automatique des tokens d'acc√®s.
 *
 * ## Architecture de s√©curit√© et protection routes
 *
 * ### üîê Syst√®me de protection multicouches
 * - **V√©rification initiale** : Contr√¥le √©tat authentification via useAuth context
 * - **Validation token** : isTokenValid() pour v√©rifier expiration token actuel
 * - **Refresh automatique** : refreshToken() si token expir√© mais refresh valide
 * - **Fallback s√©curis√©** : forceLogout() si refresh impossible
 * - **Protection continue** : Surveillance permanente validit√© session
 * - **√âtats transitoires** : Gestion loading pendant v√©rifications/refresh
 * - **Recovery graceful** : Tentative r√©cup√©ration avant d√©connexion forc√©e
 *
 * ### üõ°Ô∏è Flux de s√©curit√© impl√©ment√©
 * 1. **V√©rification context** : isAuthenticated depuis AuthContext
 * 2. **Validation token** : Contr√¥le expiration token access
 * 3. **Refresh tentative** : Si expir√©, essai refresh automatique
 * 4. **Success path** : Token valide ‚Üí affichage contenu prot√©g√©
 * 5. **Failure path** : Refresh √©chec ‚Üí d√©connexion ‚Üí LoginAdminForm
 * 6. **Loading states** : Spinners pendant toutes v√©rifications async
 *
 * ## Gestion d'√©tat sophistiqu√©e et lifecycle
 *
 * ### üîÑ √âtats de s√©curit√© et transitions
 * - **isLoading** : √âtat chargement initial authentification (context)
 * - **isRefreshing** : √âtat local refresh token en cours
 * - **hasValidToken** : √âtat local validit√© token apr√®s v√©rifications
 * - **isAuthenticated** : √âtat global authentification (context)
 * - **Transitions atomiques** : Changements √©tat coordonn√©s et coh√©rents
 * - **Race conditions** : Protection contre √©tats concurrents
 * - **Memory cleanup** : Nettoyage √©tats lors d√©montage composant
 *
 * ### ‚ö° useEffect de v√©rification token avanc√©e
 * - **D√©pendances** : [isAuthenticated, forceLogout] pour re-v√©rification
 * - **Early return** : Sortie imm√©diate si non authentifi√©
 * - **Token validation** : V√©rification expiration c√¥t√© client
 * - **Async refresh** : Gestion promise refresh avec try/catch
 * - **Error recovery** : forceLogout automatique si refresh √©choue
 * - **State cleanup** : setIsRefreshing(false) dans finally
 * - **Performance** : √âvite v√©rifications inutiles si d√©j√† non-auth
 *
 * ## Interface utilisateur et exp√©rience s√©curis√©e
 *
 * ### üé® √âtats visuels et feedback utilisateur
 * - **Loading initial** : Spinner large centr√© pendant v√©rification auth
 * - **Loading refresh** : Spinner large pendant refresh token
 * - **LoginAdminForm** : Formulaire connexion si non authentifi√©
 * - **Protected content** : Affichage children si authentifi√© valid√©
 * - **Transitions smooth** : Pas de flickering entre √©tats
 * - **Feedback imm√©diat** : √âtats loading pour toutes op√©rations async
 * - **Consistent UX** : M√™me spinner pour tous √©tats loading
 *
 * ### üì± Layout responsive et accessibilit√© s√©curit√©
 * - **Full viewport** : min-h-screen pour occupation √©cran compl√®te
 * - **Centrage universel** : flex items-center justify-center tous √©crans
 * - **Spinner sizing** : size="large" pour visibilit√© optimale
 * - **Form integration** : LoginAdminForm responsive int√©gr√©
 * - **Children passthrough** : Contenu prot√©g√© rendu sans modification
 * - **Screen readers** : Structure logique pour synth√®se vocale
 * - **Focus management** : Gestion focus lors transitions √©tats
 *
 * ## Int√©gration contexte authentification AdminJO
 *
 * ### üîó Communication avec AuthContext
 * - **useAuth hook** : Acc√®s √©tat global authentification
 * - **isAuthenticated** : √âtat bool√©en authentification utilisateur
 * - **isLoading** : √âtat chargement v√©rification initiale
 * - **forceLogout** : Callback d√©connexion forc√©e utilisateur
 * - **R√©activit√© context** : Re-render automatique changements auth
 * - **State synchronization** : Coh√©rence √©tat local et global
 * - **Event propagation** : Actions auth propag√©es dans application
 *
 * ### üõ†Ô∏è Int√©gration services authentification
 * - **isTokenValid()** : Helper v√©rification expiration token
 * - **refreshToken()** : Service refresh token automatique
 * - **Token storage** : Gestion localStorage/sessionStorage tokens
 * - **API integration** : Appels API authentification centralis√©s
 * - **Error handling** : Gestion erreurs r√©seau et serveur
 * - **Security headers** : Transmission s√©curis√©e tokens API
 *
 * ## S√©curit√© avanc√©e et bonnes pratiques
 *
 * ### üîí Mesures s√©curit√© impl√©ment√©es
 * - **Token validation** : V√©rification expiration c√¥t√© client
 * - **Automatic refresh** : Renouvellement silencieux tokens
 * - **Forced logout** : D√©connexion si compromission d√©tect√©e
 * - **Protected rendering** : Contenu sensible seulement si authentifi√©
 * - **State isolation** : √âtats s√©curit√© isol√©s composant
 * - **Error boundaries** : Gestion erreurs sans exposition donn√©es
 * - **Memory security** : Nettoyage √©tats sensibles lors d√©montage
 *
 * ### üõ°Ô∏è Protection contre attaques courantes
 * - **Token hijacking** : Validation continue emp√™che usage tokens vol√©s expir√©s
 * - **Session fixation** : Refresh tokens renouvelle session s√©curis√©e
 * - **XSS mitigation** : Pas de manipulation DOM directe donn√©es sensibles
 * - **CSRF protection** : Tokens int√©gr√©s requ√™tes authentifi√©es
 * - **Timing attacks** : Pas d'exposition temps validation c√¥t√© client
 * - **Replay attacks** : Expiration tokens limite fen√™tre attaque
 *
 * ## Performance et optimisations s√©curis√©es
 *
 * ### ‚ö° Optimisations performance actuelles
 * - **Conditional checks** : Early returns √©vitent v√©rifications inutiles
 * - **Async operations** : Refresh non-bloquant avec √©tats loading
 * - **Minimal re-renders** : useEffect d√©pendances optimis√©es
 * - **State colocation** : √âtats locaux pour performance
 * - **Component purity** : Pas d'effets de bord non contr√¥l√©s
 * - **Memory efficiency** : Cleanup automatique √©tats temporaires
 *
 * ### üéØ Candidats optimisation avanc√©e
 * - **Token caching** : Cache validation c√¥t√© client avec expiration
 * - **Preemptive refresh** : Refresh avant expiration pour UX fluide
 * - **Background refresh** : Renouvellement tokens en arri√®re-plan
 * - **Retry logic** : Tentatives multiples refresh avec backoff
 * - **Connection monitoring** : Adaptation comportement selon r√©seau
 * - **Concurrent safety** : Protection contre refreshs concurrents
 *
 * ## Contexte m√©tier s√©curit√© olympique JO 2024
 *
 * ### üèÖ Sp√©cificit√©s s√©curit√© √©v√©nements olympiques
 * - **S√©curit√© renforc√©e** : Standards √©lev√©s syst√®mes critiques JO
 * - **Acc√®s administrateurs** : Protection interfaces gestion olympique
 * - **Donn√©es sensibles** : Informations √©v√©nements, athl√®tes, r√©sultats
 * - **Conformit√© CIO** : Respect standards s√©curit√© Comit√© Olympique
 * - **Audit trails** : Tra√ßabilit√© acc√®s pour s√©curit√© JO
 * - **Multi-tenancy** : S√©paration acc√®s diff√©rents r√¥les organisateurs
 * - **High availability** : Disponibilit√© continue pendant JO
 *
 * ### üìä Types d'acc√®s prot√©g√©s AdminJO
 * - **Gestion √©v√©nements** : Cr√©ation/modification √©v√©nements sportifs
 * - **Administration lieux** : Gestion infrastructure olympique
 * - **Gestion disciplines** : Configuration sports et √©preuves
 * - **Gestion athl√®tes** : Donn√©es personnelles et performances
 * - **R√©sultats temps r√©el** : Saisie scores et classements
 * - **M√©dias olympiques** : Acc√®s contenus officiels JO
 * - **Logistique JO** : Coordination op√©rationnelle √©v√©nements
 *
 * ## Gestion erreurs et recovery robuste
 *
 * ### üö® Strat√©gies de recovery impl√©ment√©es
 * - **Graceful degradation** : Affichage login si probl√®me auth
 * - **Automatic retry** : Refresh automatique avant d√©connexion
 * - **Error isolation** : Erreurs auth n'affectent pas app globale
 * - **User feedback** : √âtats loading pendant op√©rations recovery
 * - **State consistency** : Coh√©rence √©tats m√™me en cas d'erreur
 * - **Fallback UI** : Interface connexion toujours disponible
 *
 * ### üîÑ Patterns de gestion d'erreurs
 * - **Try-catch async** : Gestion erreurs refresh token
 * - **Finally cleanup** : Nettoyage √©tats m√™me en cas d'erreur
 * - **Error boundaries** : Protection contre crashes composant
 * - **Defensive programming** : V√©rifications null/undefined
 * - **Timeout handling** : Gestion timeouts op√©rations r√©seau
 * - **Network resilience** : Adaptation probl√®mes connectivit√©
 *
 * ## Extensibilit√© et maintenance
 *
 * ### üîß Architecture extensible
 * - **Props interface** : children ReactNode pour flexibilit√© maximale
 * - **Context integration** : D√©couplage logique auth via context
 * - **Service abstraction** : Services auth interchangeables
 * - **Hook composition** : Logique r√©utilisable via custom hooks
 * - **Component composition** : AuthGuard wrappable autour contenu
 * - **Configuration externalis√©e** : Param√®tres auth via environment
 *
 * ### üìà √âvolutions futures possibles
 * - **Multi-factor auth** : Support 2FA pour s√©curit√© renforc√©e
 * - **Role-based access** : Contr√¥le granulaire permissions
 * - **Session monitoring** : Surveillance activit√© utilisateur
 * - **Biometric auth** : Authentification biom√©trique mobile
 * - **SSO integration** : Single Sign-On avec syst√®mes CIO
 * - **Audit logging** : Journalisation d√©taill√©e acc√®s
 * - **Geo-restriction** : Limitation acc√®s g√©ographique
 * - **Device fingerprinting** : S√©curit√© bas√©e appareils
 *
 * ## Patterns de d√©veloppement s√©curis√©
 *
 * ### üèóÔ∏è Architecture s√©curit√© by design
 * - **Principle of least privilege** : Acc√®s minimal n√©cessaire
 * - **Defense in depth** : Multicouches protection
 * - **Fail secure** : √âchec vers √©tat s√©curis√© (d√©connexion)
 * - **Zero trust** : V√©rification continue, pas de confiance implicite
 * - **Separation of concerns** : Logique auth isol√©e
 * - **Immutable state** : √âtats s√©curit√© non mutables
 *
 * ### üîç Testing et validation s√©curit√©
 * - **Unit tests** : Tests isol√©s fonctions s√©curit√©
 * - **Integration tests** : Tests flux authentification complets
 * - **Security tests** : Validation r√©sistance attaques
 * - **Performance tests** : Impact security checks sur performance
 * - **Accessibility tests** : S√©curit√© n'impact pas accessibilit√©
 * - **Cross-browser** : Compatibilit√© s√©curit√© tous navigateurs
 *
 * ## Limitations et consid√©rations s√©curit√©
 *
 * ### ‚ùå Limitations actuelles identifi√©es
 * - **Client-side validation** : Validation token c√¥t√© client seulement
 * - **No concurrent refresh** : Pas protection refreshs simultan√©s
 * - **Basic error handling** : Gestion erreurs simplifi√©e
 * - **No retry logic** : Pas de retry automatique si refresh √©choue
 * - **No session timeout** : Pas de timeout inactivit√© utilisateur
 * - **No device tracking** : Pas de limitation appareils
 * - **Single token type** : Pas de differentiation tokens par scope
 *
 * ### üöÄ Am√©liorations s√©curit√© prioritaires
 * - **Server-side validation** : Double validation tokens c√¥t√© serveur
 * - **Concurrent protection** : Mutex pour refreshs simultan√©s
 * - **Advanced retry** : Backoff exponentiel tentatives refresh
 * - **Session monitoring** : Timeout inactivit√© automatique
 * - **Device management** : Limitation nombre appareils connect√©s
 * - **Token revocation** : R√©vocation imm√©diate tokens compromis
 * - **Security headers** : CSP, HSTS headers s√©curit√©
 * - **Audit integration** : Logs s√©curit√© d√©taill√©s
 * - **Rate limiting** : Protection contre brute force
 * - **IP whitelisting** : Restriction acc√®s par adresses IP
 *
 * @param {AuthGuardProps} props - Configuration du garde d'authentification
 * @param {React.ReactNode} props.children - Contenu √† prot√©ger par authentification
 *
 * @returns {JSX.Element} Spinner, formulaire connexion ou contenu prot√©g√© selon √©tat auth
 *
 * @see {@link useAuth} - Hook contexte authentification global
 * @see {@link LoginAdminForm} - Composant formulaire connexion administrateur
 * @see {@link Spinner} - Composant loading states r√©utilisable
 * @see {@link isTokenValid} - Helper validation expiration token
 * @see {@link refreshToken} - Service refresh automatique token
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Protection route simple
 * <AuthGuard>
 *   <DashboardAdmin />
 * </AuthGuard>
 * ```
 *
 * @example
 * ```tsx
 * // Protection layout complet application
 * export default function ProtectedLayout({ children }) {
 *   return (
 *     <AuthGuard>
 *       <AdminLayout>
 *         {children}
 *       </AdminLayout>
 *     </AuthGuard>
 *   );
 * }
 * ```
 *
 * @example
 * ```tsx
 * // Int√©gration page Next.js
 * export default function AdminEventsPage() {
 *   return (
 *     <AuthGuard>
 *       <EvenementsManagement />
 *     </AuthGuard>
 *   );
 * }
 * ```
 */

'use client';

import { useAuth } from '@/contexts/authContext';
import Spinner from '@/components/spinner';
import LoginAdminForm from '@/components/connexion/loginAdminForm';
import { useEffect, useState } from 'react';
import { isTokenValid } from '@/lib/api/core/tokenHelpers';
import { refreshToken } from '@/lib/api/auth/authService';

/**
 * Interface des propri√©t√©s du composant AuthGuard
 *
 * @interface AuthGuardProps
 */
export interface AuthGuardProps {
  /** Contenu React √† prot√©ger par authentification - affich√© seulement si utilisateur authentifi√© avec token valide */
  children: React.ReactNode;
}

/**
 * Composant AuthGuard - Protection par authentification avec refresh automatique
 * 
 * @param props - Les propri√©t√©s du composant
 * @returns JSX.Element - Spinner, formulaire de connexion ou contenu prot√©g√©
 */
export default function AuthGuard({ children }: AuthGuardProps) {
  // R√©cup√©ration de l'√©tat d'authentification depuis le contexte
  const { isAuthenticated, isLoading, forceLogout } = useAuth();
  
  // √âtat local pour g√©rer le processus de refresh
  const [isRefreshing, setIsRefreshing] = useState(false);
  const [hasValidToken, setHasValidToken] = useState(false);

  // V√©rification et refresh du token si n√©cessaire
  useEffect(() => {
    const checkAndRefreshToken = async () => {
      // Si l'utilisateur n'est pas authentifi√©, pas besoin de v√©rifier le token
      if (!isAuthenticated) {
        setHasValidToken(false);
        return;
      }

      // V√©rifier si le token actuel est valide
      const tokenValid = isTokenValid();
      
      if (tokenValid) {
        // Token valide, tout va bien
        setHasValidToken(true);
      } else {
        // Token expir√©, tenter un refresh
        setIsRefreshing(true);
        
        try {
          await refreshToken();
          setHasValidToken(true);
        } catch {
          // √âchec du refresh, d√©connexion forc√©e
          forceLogout();
        } finally {
          setIsRefreshing(false);
        }
      }
    };

    checkAndRefreshToken();
  }, [isAuthenticated, forceLogout]);

  // Affichage du spinner pendant la v√©rification de l'authentification initiale
  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Spinner size="large" />
      </div>
    );
  }

  // Affichage du spinner pendant le refresh du token
  if (isRefreshing) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Spinner size="large" />
      </div>
    );
  }
  
  // Affichage du formulaire de connexion si l'utilisateur n'est pas authentifi√©
  if (!isAuthenticated) {
    return <LoginAdminForm />;
  }

  // Affichage du formulaire de connexion si le token n'est pas valide
  if (!hasValidToken) {
    return <LoginAdminForm />;
  }
  
  // Affichage du contenu prot√©g√© si l'utilisateur est authentifi√© avec un token valide
  return <>{children}</>;
}