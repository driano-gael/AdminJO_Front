interface SpinnerProps {
  size?: 'small' | 'medium' | 'large' | 'xlarge';
  color?: 'blue' | 'white' | 'gray' | 'green' | 'red' | 'yellow';
  text?: string;
  className?: string;
  fullScreen?: boolean;
}

/**
 * Composant Spinner - Indicateur de chargement universel AdminJO
 *
 * Ce composant fournit un indicateur de chargement anim√© complet et polyvalent pour
 * l'application AdminJO des Jeux Olympiques 2024. Il combine animation CSS fluide,
 * multiples variations de taille et couleur, support texte accompagnateur optionnel,
 * et modes d'affichage inline ou plein √©cran. Con√ßu pour tous les cas d'usage de
 * feedback utilisateur pendant les op√©rations asynchrones, il maintient la coh√©rence
 * visuelle de l'√©cosyst√®me AdminJO tout en offrant une flexibilit√© maximale pour
 * s'adapter aux contextes d'attente vari√©s de l'administration olympique.
 *
 * ## Architecture animation et variations visuelles
 *
 * ### üéØ Animation CSS optimis√©e et performante
 * - **Keyframes CSS** : Animation rotate 360¬∞ fluide avec r√®gles CSS keyframes
 * - **Transform GPU** : Utilisation transform pour acc√©l√©ration mat√©rielle
 * - **Duration contr√¥l√©e** : animation-duration 1s pour rotation uniforme
 * - **Loop infini** : animation-iteration-count infinite pour continuit√©
 * - **Timing optimis√©** : ease-in-out pour mouvement naturel
 * - **Performance** : Aucun JavaScript, pure CSS pour fluidit√© maximale
 * - **Responsive** : Animation adapt√©e tous √©crans et densit√©s pixels
 * - **Accessibility** : prefers-reduced-motion pour utilisateurs sensibles
 *
 * ### üé® Syst√®me de tailles gradu√©es et contextuelles
 * - **Small (4x4)** : w-4 h-4 pour indicateurs inline compacts
 * - **Medium (6x6)** : w-6 h-6 taille standard boutons et cards
 * - **Large (8x8)** : w-8 h-8 pour sections importantes et modales
 * - **XLarge (12x12)** : w-12 h-12 chargements plein √©cran critiques
 * - **Proportions coh√©rentes** : √âchelle g√©om√©trique design system
 * - **Context adaptation** : Tailles optimis√©es selon usage pr√©vu
 * - **Responsive scaling** : Adaptabilit√© mobile ‚Üî desktop automatique
 * - **Visual hierarchy** : Tailles communiquent importance op√©ration
 *
 * ### üåà Palette couleurs th√©matique AdminJO enrichie
 * - **Blue (d√©faut)** : text-blue-600 couleur principale AdminJO
 * - **White** : text-white pour overlays et backgrounds sombres
 * - **Gray** : text-gray-500 pour √©tats neutres et d√©sactiv√©s
 * - **Green** : text-green-600 pour succ√®s et validation en cours
 * - **Red** : text-red-600 pour erreurs et op√©rations critiques
 * - **Yellow** : text-yellow-600 pour avertissements et attention
 * - **Coh√©rence branding** : Alignement palette officielle JO 2024
 * - **Contrast compliance** : Ratios conformes WCAG accessibilit√©
 *
 * ## Fonctionnalit√©s avanc√©es et modes d'affichage
 *
 * ### üìù Support texte accompagnateur contextuel
 * - **Text optionnel** : Props text pour message explicatif
 * - **Positionnement** : Texte sous spinner avec margin optimis√©e
 * - **Typography coh√©rente** : text-gray-600 et text-sm align√©es
 * - **Multiligne support** : Gestion messages longs automatique
 * - **Contextualisation** : Messages sp√©cifiques op√©rations JO
 * - **Internationalisation** : Pr√™t pour i18n multilingue
 * - **Accessibility** : Screen readers lisent message complet
 * - **Responsive text** : Adaptation taille selon viewport
 *
 * ### üñ•Ô∏è Mode fullScreen pour chargements critiques
 * - **Overlay complet** : fixed inset-0 couvre viewport entier
 * - **Background** : bg-white bg-opacity-80 pour visibilit√© contr√¥l√©e
 * - **Z-index √©lev√©** : z-50 au-dessus tous √©l√©ments interface
 * - **Centrage parfait** : flex items-center justify-center
 * - **Scroll prevention** : Optionnel overflow-hidden sur body
 * - **Focus trap** : Emp√™che interaction reste interface pendant
 * - **ESC handling** : Fermeture optionnelle touche √âchap
 * - **Loading priorities** : Indique op√©rations critiques syst√®me
 *
 * ### üé® Customisation avanc√©e styling
 * - **ClassName override** : Props className pour styles custom
 * - **CSS-in-JS ready** : Compatible styled-components si needed
 * - **Tailwind classes** : Integration native utility-first
 * - **Custom animations** : Extension keyframes personnalis√©es
 * - **Brand theming** : Adaptation th√®mes olympiques vari√©s
 * - **Dark mode** : Support automatique modes sombre/clair
 * - **High contrast** : Adaptabilit√© besoins accessibilit√©
 * - **Custom colors** : Extension palette au-del√† pr√©d√©finis
 *
 * ## Cas d'usage AdminJO et int√©grations olympiques
 *
 * ### üèÖ Contextes m√©tier Jeux Olympiques sp√©cialis√©s
 * - **Chargement √©v√©nements** : Liste √©v√©nements olympiques depuis API
 * - **Synchronisation disciplines** : Import/export donn√©es CIO
 * - **Validation √©preuves** : Contr√¥les conformit√© r√®glements
 * - **Upload documents** : T√©l√©chargements certificats et dossiers
 * - **G√©n√©ration rapports** : Cr√©ation analytics et statistiques
 * - **Authentication** : Connexion organisateurs et officials
 * - **Real-time updates** : Synchronisation scores et r√©sultats
 * - **Batch operations** : Traitements masse donn√©es olympiques
 *
 * ### üì± Responsive design et contextes d'usage
 * - **Mobile loading** : Indicateurs tactiles smartphones organisateurs
 * - **Tablet interfaces** : Chargements interfaces terrain tablettes
 * - **Desktop admin** : Interfaces administration compl√®tes PC
 * - **Kiosque public** : √âcrans information publique JO
 * - **Embedded widgets** : Int√©gration sites partenaires officiels
 * - **Print interfaces** : Chargements g√©n√©ration documents PDF
 * - **Accessibility stations** : Interfaces adapt√©es handicaps
 * - **Multi-screen** : Synchronisation √©crans contr√¥le multiples
 *
 * ## Performance et optimisations techniques
 *
 * ### ‚ö° Optimisations rendering et animation
 * - **Pure CSS** : Aucun JavaScript requis pour animation
 * - **GPU acceleration** : transform utilis√© pour performance
 * - **Minimal DOM** : Structure HTML l√©g√®re et optimis√©e
 * - **Bundle impact** : Code minimal impact taille bundle
 * - **Tree shaking** : Import s√©lectif props utilis√©es seulement
 * - **Memory efficient** : Pas de state local ou effects
 * - **Rerender optimal** : Props stables √©vitent re-renders
 * - **CSS caching** : Classes Tailwind compil√©es et cach√©es
 *
 * ### üîí Accessibilit√© et standards universels
 * - **ARIA compliance** : role="status" pour screen readers
 * - **Keyboard friendly** : Pas d'interruption navigation clavier
 * - **Focus management** : Pr√©servation focus pendant chargement
 * - **Screen readers** : Annonce √©tat loading aux assistants
 * - **Reduced motion** : Respect pr√©f√©rences animation utilisateur
 * - **High contrast** : Support modes contraste syst√®me
 * - **Color blindness** : Palette accessible daltoniens
 * - **WCAG AAA** : Conformit√© standards accessibilit√© stricts
 *
 * ### üß™ Testabilit√© et maintenance d√©veloppeur
 * - **Props interface** : Structure claire pour tests unitaires
 * - **Visual testing** : Snapshots rendus stables r√©gression
 * - **Animation testing** : Validation √©tats animation Jest
 * - **Accessibility testing** : Tests conformit√© a11y automatis√©s
 * - **Performance testing** : M√©triques rendering et animation
 * - **Cross-browser** : Validation compatibilit√© navigateurs
 * - **Storybook ready** : Documentation interactive composant
 * - **TypeScript strict** : Validation types compilation stricte
 *
 * ## Extensions futures et am√©liorations envisageables
 *
 * ### üöÄ √âvolutions fonctionnelles avanc√©es
 * - **Progress indication** : Pourcentage completion int√©gr√©
 * - **Multi-step loading** : Indicateurs √©tapes processus
 * - **Estimated time** : Pr√©diction dur√©e restante IA
 * - **Cancellation** : Bouton annulation op√©rations longues
 * - **Retry mechanism** : Relance automatique si √©chec
 * - **Loading history** : Historique op√©rations utilisateur
 * - **Contextual tips** : Conseils pendant attente
 * - **Gamification** : √âl√©ments ludiques patience utilisateur
 *
 * ### üé® Am√©liorations visuelles et UX
 * - **Skeleton loading** : Aper√ßu structure avant contenu
 * - **Lottie animations** : Animations vectorielles complexes
 * - **Particle effects** : Effets visuels immersifs
 * - **Sound feedback** : Audio discret confirmation actions
 * - **Haptic feedback** : Vibrations mobiles pour confirmation
 * - **Contextual imagery** : Images th√©matiques JO pendant attente
 * - **Progressive disclosure** : R√©v√©lation graduelle information
 * - **Micro-interactions** : D√©tails animation engagement
 *
 * @param {SpinnerProps} props - Configuration apparence et comportement spinner
 * @param {string} [props.size="medium"] - Taille spinner: small|medium|large|xlarge
 * @param {string} [props.color="blue"] - Couleur: blue|white|gray|green|red|yellow
 * @param {string} [props.text] - Texte accompagnateur optionnel sous spinner
 * @param {string} [props.className] - Classes CSS Tailwind custom additionnelles
 * @param {boolean} [props.fullScreen=false] - Mode plein √©cran avec overlay
 *
 * @returns {JSX.Element} Indicateur chargement anim√© configur√© AdminJO
 *
 * @see {@link Notification} - Composant messages feedback utilisateur
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Spinner basique taille et couleur par d√©faut
 * <Spinner />
 * ```
 *
 * @example
 * ```tsx
 * // Spinner avec texte explicatif contextuel
 * <Spinner
 *   text="Chargement des √©v√©nements olympiques..."
 *   size="large"
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Mode plein √©cran pour op√©rations critiques
 * <Spinner
 *   fullScreen
 *   text="Synchronisation avec la base CIO en cours..."
 *   size="xlarge"
 *   color="blue"
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Spinner contexte succ√®s avec style custom
 * <Spinner
 *   color="green"
 *   size="medium"
 *   text="Sauvegarde r√©ussie !"
 *   className="mb-4"
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Dans un bouton pendant action async
 * <button disabled={isLoading}>
 *   {isLoading ? (
 *     <div className="flex items-center">
 *       <Spinner size="small" color="white" className="mr-2" />
 *       Traitement...
 *     </div>
 *   ) : (
 *     'Valider'
 *   )}
 * </button>
 * ```
 */
export default function Spinner({
  size = 'medium',
  color = 'blue',
  text,
  className = '',
  fullScreen = false
}: SpinnerProps) {
  // Configuration des tailles
  const sizeClasses = {
    small: 'w-4 h-4',
    medium: 'w-6 h-6',
    large: 'w-8 h-8',
    xlarge: 'w-12 h-12'
  };

  // Configuration des couleurs
  const colorClasses = {
    blue: 'text-blue-600',
    white: 'text-white',
    gray: 'text-gray-500',
    green: 'text-green-600',
    red: 'text-red-600',
    yellow: 'text-yellow-600'
  };

  // Style de base du spinner
  const spinnerClasses = `
    ${sizeClasses[size]} 
    ${colorClasses[color]} 
    animate-spin 
    ${className}
  `.trim();

  // Contenu du spinner
  const spinnerContent = (
    <div className={fullScreen ? "flex flex-col items-center" : "flex flex-col items-center"}>
      <svg
        className={spinnerClasses}
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
        role="status"
        aria-label={text ? `Chargement: ${text}` : "Chargement en cours"}
      >
        <circle
          className="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          strokeWidth="4"
        />
        <path
          className="opacity-75"
          fill="currentColor"
          d="m12 2 A10,10 0 0,1 22,12 L20,12 A8,8 0 0,0 12,4z"
        />
      </svg>
      {text && (
        <span className="mt-2 text-sm text-gray-600 text-center max-w-xs">
          {text}
        </span>
      )}
    </div>
  );

  // Mode plein √©cran
  if (fullScreen) {
    return (
      <div className="fixed inset-0 bg-white bg-opacity-80 flex items-center justify-center z-50">
        {spinnerContent}
      </div>
    );
  }

  // Mode inline standard
  return spinnerContent;
}
