'use client';

import {JSX, useState} from 'react';
import { useLieuxManagement } from '@/hooks/useLieuxManagement';
import { useSessionExpiry } from '@/hooks/useSessionExpiry';
import { Lieu } from '@/types/sportEvenement/lieu';
import { CreateLieuRequest } from '@/lib/api/services/evenementSports/lieuService';
import Notification from '@/components/notification';
import LieuxHeader from './LieuxHeader';
import SearchAndFilters from './SearchAndFilters';
import LieuxTable from './LieuxTable';
import LieuModal from './LieuModal';

/**
 * Composant LieuxManagement - Gestion compl√®te des lieux olympiques AdminJO
 *
 * @name LieuxManagement
 * Ce composant principal orchestre la gestion compl√®te des lieux olympiques pour les
 * Jeux Olympiques 2024. Il int√®gre toutes les fonctionnalit√©s CRUD (cr√©ation, lecture,
 * mise √† jour, suppression) des √©tablissements sportifs olympiques avec une interface
 * utilisateur compl√®te incluant header, recherche/filtres, tableau des donn√©es et modal
 * de saisie. Con√ßu pour les administrateurs des JO 2024, il permet la gestion centralis√©e
 * de tous les lieux olympiques (Stade de France, Centre Aquatique, Arena Bercy, etc.)
 * avec notifications utilisateur et gestion d'erreurs avanc√©e.
 *
 * ## Architecture et composition compl√®te
 *
 * ### Structure modulaire organis√©e
 * - **LieuxHeader** : En-t√™te avec navigation et bouton cr√©ation
 * - **SearchAndFilters** : Barre de recherche et filtres lieux
 * - **LieuxTable** : Tableau principal affichage/gestion lieux
 * - **LieuModal** : Modal cr√©ation/√©dition lieu olympique
 * - **Notification** : Syst√®me notifications succ√®s/erreur
 *
 * ### Hooks sp√©cialis√©s int√©gr√©s
 * - **useLieuxManagement** : Logique m√©tier compl√®te gestion lieux
 * - **useSessionExpiry** : S√©curit√© session administrateur
 * - **useState local** : √âtats UI modal, √©dition, notifications
 *
 * ## Fonctionnalit√©s CRUD compl√®tes impl√©ment√©es
 *
 * ### Cr√©ation de nouveau lieu olympique
 * - **Trigger** : Bouton "Nouveau Lieu" dans LieuxHeader
 * - **Modal** : LieuModal en mode cr√©ation (editingLieu = null)
 * - **Validation** : Donn√©es valid√©es avant envoi API
 * - **Callback** : handleSaveLieu avec CreateLieuRequest
 * - **Notification** : "Lieu cr√©√© avec succ√®s !" en cas de succ√®s
 * - **Gestion erreur** : Affichage erreur si √©chec cr√©ation
 * - **Refresh** : Rechargement liste apr√®s cr√©ation r√©ussie
 *
 * ### Lecture et affichage lieux
 * - **Source** : Hook useLieuxManagement avec √©tat lieux[]
 * - **Tableau** : LieuxTable pour affichage structur√©
 * - **Recherche** : Filtrage temps r√©el via SearchAndFilters
 * - **Loading** : √âtats de chargement pendant r√©cup√©ration
 * - **Pagination** : G√©r√©e dans composants enfants si n√©cessaire
 * - **Actualisation** : Bouton refresh dans tableau
 *
 * ### Modification lieu existant
 * - **Trigger** : Bouton "Modifier" dans LieuxTableRow
 * - **Pr√©-remplissage** : Modal avec donn√©es lieu s√©lectionn√©
 * - **Mode √©dition** : editingLieu contient lieu √† modifier
 * - **Update API** : updateLieu(id, data) via hook
 * - **Notification** : "Lieu modifi√© avec succ√®s !" si r√©ussite
 * - **Persistence** : Mise √† jour imm√©diate dans liste
 *
 * ### Suppression lieu olympique
 * - **Trigger** : Bouton "Supprimer" dans LieuxTableRow
 * - **Confirmation** : Gestion dans composants enfants
 * - **API call** : deleteLieu(id) avec gestion erreur
 * - **Notification** : Messages succ√®s/erreur appropri√©s
 * - **Mise √† jour** : Retrait imm√©diat de la liste
 * - **S√©curit√©** : V√©rification autorisations via session
 *
 * ## Gestion d'√©tat complexe et notifications
 *
 * ### üéõ√âtats modaux et √©dition
 * - **showModal** : boolean contr√¥le affichage LieuModal
 * - **editingLieu** : Lieu | null pour mode cr√©ation/√©dition
 * - **Mode cr√©ation** : editingLieu = null, modal vierge
 * - **Mode √©dition** : editingLieu = lieu s√©lectionn√©, pr√©-remplissage
 * - **Fermeture propre** : Reset √©tats lors fermeture modal
 *
 * ## Interactions utilisateur et workflows
 *
 * ### Workflow cr√©ation lieu complet
 * 1. **Clic** "Nouveau Lieu" ‚Üí handleOpenModal() sans param√®tre
 * 2. **Ouverture** modal vierge (editingLieu = null)
 * 3. **Saisie** donn√©es lieu par utilisateur
 * 4. **Validation** donn√©es c√¥t√© client et serveur
 * 5. **Cr√©ation** API call createLieu(data)
 * 6. **Notification** succ√®s + fermeture modal
 * 7. **Refresh** liste lieux mise √† jour
 *
 * ### Workflow modification lieu complet
 * 1. **Clic** "Modifier" sur ligne ‚Üí handleOpenModal(lieu)
 * 2. **Pr√©-remplissage** modal avec donn√©es existantes
 * 3. **Modification** donn√©es par utilisateur
 * 4. **Sauvegarde** updateLieu(id, data) via handleSaveLieu
 * 5. **Notification** "Lieu modifi√© avec succ√®s !"
 * 6. **Mise √† jour** imm√©diate affichage tableau
 *
 * ### Workflow suppression lieu
 * 1. **Clic** "Supprimer" ‚Üí handleDeleteLieu(id)
 * 2. **Confirmation** (g√©r√©e dans composants enfants)
 * 3. **Suppression** API call deleteLieu(id)
 * 4. **Notification** r√©sultat op√©ration
 * 5. **Refresh** liste sans lieu supprim√©
 *
 * ### Workflow recherche et filtrage
 * 1. **Saisie** terme recherche dans SearchAndFilters
 * 2. **Transmission** handleSearch(terme) vers hook
 * 3. **Filtrage** c√¥t√© client ou serveur
 * 4. **Mise √† jour** affichage LieuxTable
 * 5. **Temps r√©el** r√©sultats instantan√©s
 *
 * ## S√©curit√© et gestion session
 *
 * ### Protection session administrateur
 * - **useSessionExpiry** : Surveillance continue session
 * - **Auto-logout** : Redirection si session expir√©e
 * - **Renouvellement** : Gestion silencieuse tokens
 * - **Intercepteurs** : Gestion 401/403 automatique
 * - **Persistance** : Sauvegarde √©tat si d√©connexion
 *
 * ### Validation et s√©curisation donn√©es
 * - **Types TypeScript** : Interfaces strictes Lieu/CreateLieuRequest
 * - **Validation c√¥t√© client** : Contr√¥les avant envoi
 * - **Sanitisation** : Nettoyage donn√©es utilisateur
 * - **CSRF protection** : Tokens anti-forgerie
 * - **Autorisations** : V√©rification droits modification
 *
 * @returns {JSX.Element} Interface compl√®te de gestion des lieux olympiques
 *
 * @see {@link useLieuxManagement} - Hook logique m√©tier gestion lieux
 * @see {@link LieuxHeader} - Composant en-t√™te avec navigation
 * @see {@link SearchAndFilters} - Composant recherche et filtres
 * @see {@link LieuxTable} - Tableau principal affichage lieux
 * @see {@link LieuModal} - Modal cr√©ation/√©dition lieu
 * @see {@link Notification} - Syst√®me notifications utilisateur
 *
 */
export function LieuxManagement():JSX.Element {
      useSessionExpiry();

      const {
        lieux,
        searchTerm,
        loading,
        error,
        createLoading,
        createError,
        loadLieux,
        createLieu,
        updateLieu,
        deleteLieu,
        handleSearch,
        setCreateError
      } = useLieuxManagement();

      const [showModal, setShowModal] = useState(false);
      const [editingLieu, setEditingLieu] = useState<Lieu | null>(null);
      const [notification, setNotification] = useState<{
          message: string;
          type: 'success' | 'error' | 'info';
      } | null>(null);

      const handleOpenModal = (lieu?: Lieu) => {
        setEditingLieu(lieu || null);
        setShowModal(true);
      };
    const handleSaveLieu = async (lieuData: CreateLieuRequest) => {
      try {
        if (editingLieu) {
          await updateLieu(editingLieu.id, lieuData);
          setNotification({
            message: 'Lieu modifi√© avec succ√®s !',
            type: 'success'
          });
        } else {
          // Mode cr√©ation
          await createLieu(lieuData);
          setNotification({
            message: 'Lieu cr√©√© avec succ√®s !',
            type: 'success'
          });
        }
        setShowModal(false);
        setEditingLieu(null);
      } catch {
        // L'erreur est d√©j√† g√©r√©e dans le hook
      }
    };

    // Fonction pour supprimer un lieu
    const handleDeleteLieu = async (id: number) => {
      try {
        await deleteLieu(id);
        setNotification({
          message: 'Lieu supprim√© avec succ√®s !',
          type: 'success'
        });
      } catch {
        setNotification({
          message: 'Erreur lors de la suppression du lieu',
          type: 'error'
        });
      }
    };

    return (
      <div className="min-h-screen bg-base-200">
        {/* Header */}
        <LieuxHeader 
          onCreateClick={()=>handleOpenModal()}
        />

        {/* Main Content */}
        <main className="max-w-7xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
          {/* Search */}
          <SearchAndFilters
            searchTerm={searchTerm}
            onSearch={handleSearch}
          />

          {/* Lieux Table */}
          <LieuxTable
            lieux={lieux}
            loading={loading}
            searchTerm={searchTerm}
            onRefresh={loadLieux}
            onDelete={handleDeleteLieu}
            onEdit={(lieux)=>handleOpenModal(lieux)}
            error={error}
          />
        </main>
        <LieuModal
          isOpen={showModal}
          onClose={() => {
            setShowModal(false);
            setEditingLieu(null);
            setCreateError(null);
          }}
          onSave={handleSaveLieu}
          loading={createLoading}
          error={createError}
          lieu={editingLieu || undefined}
        />
        {notification && (
          <Notification
            title="Gestion Lieux"
            message={notification.message}
            type={notification.type}
            onClose={() => setNotification(null)}
          />
        )}
      </div>
    );
}
export default LieuxManagement;
