import { useState, useEffect } from 'react';
import { CreateLieuRequest } from '@/lib/api/services/evenementSports/lieuService';
import { Lieu } from '@/types/sportEvenement/lieu';

/**
 * Composant LieuModal - Modal de cr√©ation/√©dition des lieux olympiques AdminJO
 *
 * @name LieuModal
 * Ce composant modal sp√©cialis√© orchestre la cr√©ation et modification des lieux olympiques
 * pour les Jeux Olympiques 2024. Il fournit une interface formulaire d√©di√©e avec validation,
 * gestion d'erreurs int√©gr√©e, et adaptation automatique mode cr√©ation/√©dition selon le contexte.
 * Con√ßu pour l'administration des √©tablissements sportifs JO (Stade de France, Centre Aquatique,
 * Arena Bercy, etc.), il suit les standards AdminJO avec feedback utilisateur temps r√©el,
 * √©tats de chargement visuels, et int√©gration harmonieuse dans le workflow de gestion des
 * infrastructures olympiques. Interface modal overlay responsive avec focus management optimis√©.
 *
 * ## Architecture modale et modes d'utilisation
 *
 * ### Modes adaptatifs cr√©ation vs √©dition lieu
 * - **D√©tection automatique** : `isEditing = Boolean(lieu)` pour mode switch
 * - **Mode cr√©ation** : lieu=undefined, formulaire vierge, titre "Cr√©er un nouveau lieu"
 * - **Mode √©dition** : lieu=objet, pr√©-remplissage donn√©es, titre "Modifier le lieu"
 * - **Labels dynamiques** : submitLabel "Cr√©er"/"Modifier" selon contexte
 * - **Loading adaptatif** : loadingLabel "Cr√©ation..."/"Modification..." contextualis√©
 * - **Reset intelligent** : Formulaire r√©initialis√© selon mode via useEffect
 * - **Validation unifi√©e** : M√™me logique validation pour cr√©ation/√©dition
 *
 * ## Gestion d'√©tat et cycle de vie modal
 *
 * ### √âtat local formulaire et synchronisation
 * - **formData state** : useState<CreateLieuRequest> pour donn√©es formulaire
 * - **Structure initiale** : {nom: ''} minimal requis cr√©ation lieu
 * - **Synchronisation props** : useEffect(lieu) pour pr√©-remplissage √©dition
 * - **Reset cr√©ation** : formData vide si lieu=undefined
 * - **Reset √©dition** : formData.nom = lieu.nom si lieu pr√©sent
 * - **D√©pendance effect** : [lieu] pour re-sync changement lieu prop
 * - **Immutabilit√©** : Spread operator {...formData, nom} pour updates
 *
 * ### üéõContr√¥le visibilit√© et √©tats modal
 * - **Conditional rendering** : `if (!isOpen) return null` pour performance
 * - **Prop isOpen** : boolean externe contr√¥le affichage modal
 * - **onClose callback** : Fermeture d√©l√©gu√©e composant parent
 * - **√âtats loading** : disabled sur boutons + labels adaptatifs
 * - **Gestion erreurs** : Bandeau error conditionnel si error prop
 * - **Persistance donn√©es** : Formulaire maintenu ouvert si erreur
 * - **Focus management** : Pas de focus trap impl√©ment√© (am√©lioration possible)
 *
 * ## Workflow cr√©ation et √©dition lieux olympiques
 *
 * ### Processus cr√©ation nouveau lieu olympique
 * 1. **Ouverture modal** : isOpen=true, lieu=undefined ‚Üí mode cr√©ation
 * 2. **Initialisation** : formData={nom: ''} formulaire vierge
 * 3. **Saisie utilisateur** : Input nom lieu avec placeholder guide
 * 4. **Validation** : trim() v√©rification nom non-vide
 * 5. **Soumission** : onSave(formData) avec CreateLieuRequest
 * 6. **√âtats loading** : disabled boutons, label "Cr√©ation..."
 * 7. **Gestion retour** : Success=fermeture, Error=maintien+affichage
 *
 * ### Processus modification lieu existant
 * 1. **Ouverture modal** : isOpen=true, lieu=objetLieu ‚Üí mode √©dition
 * 2. **Pr√©-remplissage** : useEffect set formData.nom = lieu.nom
 * 3. **Modification** : Utilisateur √©dite nom pr√©-rempli
 * 4. **Validation identique** : M√™me logique que cr√©ation
 * 5. **Soumission** : onSave(formData) pour update lieu
 * 6. **Loading adapt√©** : Label "Modification..." contextualis√©
 * 7. **Persistance** : Donn√©es maintenues si erreur modification
 *
 * ### Processus annulation et fermeture
 * - **Bouton Annuler** : onClick={onClose} fermeture sans sauvegarde
 * - **Disabled loading** : Annulation bloqu√©e pendant soumission
 * - **Perte donn√©es** : Warning implicite perte saisie (am√©lioration UX)
 * - **Reset formulaire** : Parent responsibility r√©initialiser √©tat
 *
 * @param {Props} props - Propri√©t√©s du composant modal lieu
 * @param {boolean} props.isOpen - √âtat d'ouverture de la modal
 * @param {function} props.onClose - Callback fermeture modal
 * @param {function} props.onSave - Callback sauvegarde donn√©es lieu
 * @param {boolean} props.loading - √âtat de chargement pendant soumission
 * @param {string|null} props.error - Message d'erreur √† afficher
 * @param {Lieu} [props.lieu] - Lieu √† √©diter (optionnel, cr√©ation si absent)
 *
 * @returns {JSX.Element|null} Modal formulaire lieu ou null si ferm√©e
 *
 * @see {@link LieuxManagement} - Composant parent orchestrateur
 * @see {@link CreateLieuRequest} - Interface donn√©es cr√©ation lieu
 * @see {@link Lieu} - Type entit√© lieu pour √©dition
 *
 */
interface Props {
    isOpen: boolean;
    onClose: () => void;
    onSave: (lieuData: CreateLieuRequest) => void;
    loading: boolean;
    error: string | null;
    lieu?: Lieu;
}

export function LieuModal({
    isOpen, 
    onClose, 
    onSave, 
    loading, 
    error, 
    lieu
}: Props) {
    const [formData, setFormData] = useState<CreateLieuRequest>({
      nom: ''
    });

    // D√©terminer si c'est une cr√©ation ou une modification
    const isEditing = Boolean(lieu);
    const title = isEditing ? 'Modifier le lieu' : 'Cr√©er un nouveau lieu';
    const submitLabel = isEditing ? 'Modifier' : 'Cr√©er';
    const loadingLabel = isEditing ? 'Modification...' : 'Cr√©ation...';

    // Initialiser le formulaire avec les donn√©es du lieu en mode √©dition
    useEffect(() => {
      if (lieu) {
        setFormData({
          nom: lieu.nom
        });
      } else {
        setFormData({
          nom: ''
        });
      }
    }, [lieu]);

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      if (formData.nom.trim()) {
        onSave(formData);
      }
    };
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div className="flex items-center justify-center mb-4" style={{ minHeight: '3rem' }}>
                    <h3 className="text-lg text-black font-semibold">{title}</h3>
                </div>

                {error && (
                    <div className="mb-4 text-sm text-red-600 bg-red-50 p-2 rounded">
                        {error}
                    </div>
                )}
              
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <input
                            type="text"
                            value={formData.nom}
                            onChange={(e) => setFormData({ ...formData, nom: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 text-black rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: Stade de France"
                            required
                        />
                    </div>
                    
                    <div className="flex justify-end space-x-3 pt-4">
                        <button
                            type="button"
                            onClick={onClose}
                            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
                            disabled={loading}
                        >
                            Annuler
                        </button>
                        <button
                            type="submit"
                            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-blue-300"
                            disabled={loading}
                        >
                            {loading ? loadingLabel : submitLabel}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}
export default LieuModal;
