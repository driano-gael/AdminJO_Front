import { useState, useEffect } from 'react';
import { CreateLieuRequest } from '@/lib/api/services/evenementSports/lieuService';
import { Lieu } from '@/types/sportEvenement/lieu';

/**
 * Composant LieuModal - Modal de cr√©ation/√©dition des lieux olympiques AdminJO
 *
 * Ce composant modal sp√©cialis√© orchestre la cr√©ation et modification des lieux olympiques
 * pour les Jeux Olympiques 2024. Il fournit une interface formulaire d√©di√©e avec validation,
 * gestion d'erreurs int√©gr√©e, et adaptation automatique mode cr√©ation/√©dition selon le contexte.
 * Con√ßu pour l'administration des √©tablissements sportifs JO (Stade de France, Centre Aquatique,
 * Arena Bercy, etc.), il suit les standards AdminJO avec feedback utilisateur temps r√©el,
 * √©tats de chargement visuels, et int√©gration harmonieuse dans le workflow de gestion des
 * infrastructures olympiques. Interface modal overlay responsive avec focus management optimis√©.
 *
 * ## Architecture modale et modes d'utilisation
 *
 * ### üéØ Modes adaptatifs cr√©ation vs √©dition lieu
 * - **D√©tection automatique** : `isEditing = Boolean(lieu)` pour mode switch
 * - **Mode cr√©ation** : lieu=undefined, formulaire vierge, titre "Cr√©er un nouveau lieu"
 * - **Mode √©dition** : lieu=objet, pr√©-remplissage donn√©es, titre "Modifier le lieu"
 * - **Labels dynamiques** : submitLabel "Cr√©er"/"Modifier" selon contexte
 * - **Loading adaptatif** : loadingLabel "Cr√©ation..."/"Modification..." contextualis√©
 * - **Reset intelligent** : Formulaire r√©initialis√© selon mode via useEffect
 * - **Validation unifi√©e** : M√™me logique validation pour cr√©ation/√©dition
 *
 * ### üñºÔ∏è Interface modal overlay responsive
 * - **Overlay backdrop** : fixed inset-0 bg-black bg-opacity-50 pour isolation
 * - **Centrage parfait** : flex items-center justify-center pour position optimale
 * - **Z-index √©lev√©** : z-50 pour superposition garantie autres √©l√©ments
 * - **Container modal** : bg-white rounded-lg avec max-w-md largeur contr√¥l√©e
 * - **Padding responsive** : p-6 respiration g√©n√©reuse, mx-4 margins s√©curit√© mobile
 * - **Fermeture overlay** : Pas de clic backdrop (s√©curit√© donn√©es formulaire)
 * - **Accessibilit√©** : Structure modal respectant standards ARIA (potentiel am√©lioration)
 *
 * ### üìã Structure formulaire sp√©cialis√©e lieu olympique
 * - **Champ unique nom** : Input text pour d√©signation √©tablissement sportif
 * - **Placeholder contextuel** : "Ex: Stade de France" pour guider saisie
 * - **Validation HTML5** : required sur input nom pour validation basique
 * - **Validation JavaScript** : trim() pour √©viter espaces uniquement
 * - **√âtat contr√¥l√©** : formData state local avec CreateLieuRequest interface
 * - **Synchronisation** : useEffect pour mise √† jour formData selon lieu prop
 * - **Actions doubles** : Annuler (fermeture) + Soumettre (cr√©ation/modification)
 *
 * ## Gestion d'√©tat et cycle de vie modal
 *
 * ### üîÑ √âtat local formulaire et synchronisation
 * - **formData state** : useState<CreateLieuRequest> pour donn√©es formulaire
 * - **Structure initiale** : {nom: ''} minimal requis cr√©ation lieu
 * - **Synchronisation props** : useEffect(lieu) pour pr√©-remplissage √©dition
 * - **Reset cr√©ation** : formData vide si lieu=undefined
 * - **Reset √©dition** : formData.nom = lieu.nom si lieu pr√©sent
 * - **D√©pendance effect** : [lieu] pour re-sync changement lieu prop
 * - **Immutabilit√©** : Spread operator {...formData, nom} pour updates
 *
 * ### üéõÔ∏è Contr√¥le visibilit√© et √©tats modal
 * - **Conditional rendering** : `if (!isOpen) return null` pour performance
 * - **Prop isOpen** : boolean externe contr√¥le affichage modal
 * - **onClose callback** : Fermeture d√©l√©gu√©e composant parent
 * - **√âtats loading** : disabled sur boutons + labels adaptatifs
 * - **Gestion erreurs** : Bandeau error conditionnel si error prop
 * - **Persistance donn√©es** : Formulaire maintenu ouvert si erreur
 * - **Focus management** : Pas de focus trap impl√©ment√© (am√©lioration possible)
 *
 * ## Workflow cr√©ation et √©dition lieux olympiques
 *
 * ### ‚ûï Processus cr√©ation nouveau lieu olympique
 * 1. **Ouverture modal** : isOpen=true, lieu=undefined ‚Üí mode cr√©ation
 * 2. **Initialisation** : formData={nom: ''} formulaire vierge
 * 3. **Saisie utilisateur** : Input nom lieu avec placeholder guide
 * 4. **Validation** : trim() v√©rification nom non-vide
 * 5. **Soumission** : onSave(formData) avec CreateLieuRequest
 * 6. **√âtats loading** : disabled boutons, label "Cr√©ation..."
 * 7. **Gestion retour** : Success=fermeture, Error=maintien+affichage
 *
 * ### ‚úèÔ∏è Processus modification lieu existant
 * 1. **Ouverture modal** : isOpen=true, lieu=objetLieu ‚Üí mode √©dition
 * 2. **Pr√©-remplissage** : useEffect set formData.nom = lieu.nom
 * 3. **Modification** : Utilisateur √©dite nom pr√©-rempli
 * 4. **Validation identique** : M√™me logique que cr√©ation
 * 5. **Soumission** : onSave(formData) pour update lieu
 * 6. **Loading adapt√©** : Label "Modification..." contextualis√©
 * 7. **Persistance** : Donn√©es maintenues si erreur modification
 *
 * ### üö´ Processus annulation et fermeture
 * - **Bouton Annuler** : onClick={onClose} fermeture sans sauvegarde
 * - **Disabled loading** : Annulation bloqu√©e pendant soumission
 * - **Perte donn√©es** : Warning implicite perte saisie (am√©lioration UX)
 * - **Reset formulaire** : Parent responsibility r√©initialiser √©tat
 *
 * ## Interface utilisateur et exp√©rience modale
 *
 * ### üé® Design et pr√©sentation formulaire lieu
 * - **Header centr√©** : Titre avec minHeight 3rem pour stabilit√© layout
 * - **Titre dynamique** : "Cr√©er un nouveau lieu" vs "Modifier le lieu"
 * - **Typographie** : text-lg text-black font-semibold pour hi√©rarchie
 * - **Espacement** : space-y-4 formulaire + pt-4 s√©paration boutons
 * - **Input styling** : border-gray-300 + focus:ring-blue-500 coh√©rence AdminJO
 * - **Placeholder contextualis√©** : "Ex: Stade de France" guide olympique
 * - **Largeur compl√®te** : w-full input pour utilisation espace modal
 *
 * ### üîò Boutons d'action et √©tats interactifs
 * - **Bouton Annuler** : Secondaire gray-200 hover:gray-300 style
 * - **Bouton Principal** : bg-blue-600 hover:blue-700 AdminJO theme
 * - **√âtats disabled** : disabled={loading} sur les deux boutons
 * - **Labels adaptatifs** : "Cr√©er"/"Modifier" + "Cr√©ation..."/"Modification..."
 * - **Couleur disabled** : disabled:bg-blue-300 feedback visuel
 * - **Espacement** : space-x-3 s√©paration horizontale boutons
 * - **Position** : justify-end alignement droite standard formulaires
 *
 * ### üö® Gestion d'erreurs et feedback utilisateur
 * - **Bandeau erreur** : Conditional {error && ...} affichage
 * - **Style erreur** : text-red-600 bg-red-50 p-2 rounded coh√©rent
 * - **Position** : Entre titre et formulaire pour visibilit√©
 * - **Persistance** : Erreur reste affich√©e jusqu'√† nouvelle soumission
 * - **Contenu brut** : Affichage direct message error string
 * - **Pas de dismiss** : Erreur effac√©e par action utilisateur uniquement
 *
 * ## Validation et s√©curit√© donn√©es lieu
 *
 * ### ‚úÖ Validation c√¥t√© client impl√©ment√©e
 * - **Required HTML5** : Attribut required sur input nom
 * - **Validation JavaScript** : if (formData.nom.trim()) avant soumission
 * - **Whitespace handling** : trim() √©limine espaces d√©but/fin
 * - **Validation minimale** : Seulement nom non-vide requis actuellement
 * - **UX validation** : Feedback browser built-in pour required
 * - **Pr√©vention submit** : handleSubmit preventDefault + validation
 *
 * ### üîí S√©curit√© et robustesse formulaire
 * - **Interface TypeScript** : CreateLieuRequest pour structure donn√©es
 * - **Props validation** : Interface Props stricte pour contrat
 * - **Controlled inputs** : value={formData.nom} √©tat contr√¥l√©
 * - **Immutable updates** : Spread operator pr√©serve immutabilit√©
 * - **Sanitisation** : trim() basique (XSS prevention c√¥t√© serveur assum√©e)
 * - **Error boundaries** : Pas impl√©ment√© (d√©l√©gu√© composants parents)
 *
 * ## Responsive design et accessibilit√© modale
 *
 * ### üì± Adaptation responsive modal
 * - **Largeur adaptative** : max-w-md container + mx-4 marges s√©curit√©
 * - **Full width mobile** : w-full avec marges pour √©crans √©troits
 * - **Input responsive** : w-full utilisation compl√®te largeur modal
 * - **Padding adaptatif** : p-6 confortable desktop et mobile
 * - **Overlay responsive** : fixed inset-0 couvre tout viewport
 * - **Touch-friendly** : py-2 inputs + boutons dimensionn√©s tactile
 * - **Centrage universel** : flex centering fonctionne tous √©crans
 *
 * ### ‚ôø Accessibilit√© et navigation clavier
 * - **S√©mantique HTML** : Form/input structure native accessible
 * - **Focus visible** : focus:ring-2 sur input pour navigation clavier
 * - **Tab navigation** : Ordre tabulation logique input ‚Üí boutons
 * - **Submit form** : Enter dans input d√©clenche handleSubmit
 * - **Escape key** : Pas impl√©ment√© fermeture ESC (am√©lioration)
 * - **Focus trap** : Pas impl√©ment√© confinement focus modal
 * - **ARIA labels** : Pas d'attributs ARIA sp√©cifiques (am√©lioration)
 * - **Screen readers** : Titre et labels lisibles synth√®se vocale
 *
 * ## Performance et optimisations modal
 *
 * ### ‚ö° Optimisations actuelles impl√©ment√©es
 * - **Conditional render** : return null si !isOpen √©vite DOM inutile
 * - **State local minimal** : Seulement formData n√©cessaire
 * - **Effect cibl√©** : useEffect([lieu]) d√©pendance pr√©cise
 * - **Immutable updates** : Spread operator √©vite mutations
 * - **CSS statique** : Classes Tailwind pr√©-compil√©es
 * - **Callbacks stables** : Props functions pr√©sum√©es stables parent
 *
 * ### üéØ Am√©liorations performance possibles
 * - **React.memo** : M√©morisation si re-renders fr√©quents
 * - **useCallback** : M√©morisation handleSubmit si instable
 * - **Portal modal** : React Portal pour rendu hors arbre DOM
 * - **Animation optimis√©e** : CSS transforms vs layout changes
 * - **Lazy validation** : Validation diff√©r√©e onBlur vs onChange
 * - **Debounced sync** : Synchronisation diff√©r√©e si lieu change fr√©quent
 *
 * ## Int√©gration √©cosyst√®me et architecture lieux AdminJO
 *
 * ### üîó Communication avec LieuxManagement parent
 * - **Props descendantes** : isOpen, loading, error, lieu depuis parent
 * - **Callbacks ascendants** : onClose, onSave vers LieuxManagement
 * - **Data flow** : Formulaire ‚Üí onSave ‚Üí API call ‚Üí notification
 * - **Error handling** : Erreurs API remont√©es via error prop
 * - **State external** : Modal stateless pour logique m√©tier
 * - **Lifecycle parent** : Ouverture/fermeture contr√¥l√©e parent
 *
 * ### üìä Types et interfaces partag√©es
 * - **CreateLieuRequest** : Interface API standardis√©e cr√©ation/modification
 * - **Lieu** : Type entit√© pour mode √©dition
 * - **Props interface** : Contrat strict composant modal
 * - **Consistency** : M√™mes types que services et hooks
 * - **Extensibility** : Interfaces adaptables √©volutions futures
 * - **Type safety** : TypeScript strict validation compilation
 *
 * ## Contexte m√©tier lieux olympiques JO 2024
 *
 * ### üèÖ Sp√©cificit√©s domaine infrastructure olympique
 * - **Terminologie** : "lieu" pour √©tablissements sportifs JO
 * - **Exemples concrets** : Placeholder "Stade de France" guide utilisateur
 * - **Nomenclature** : Noms officiels √©tablissements olympiques
 * - **Simplicit√©** : Formulaire √©pur√© focalis√© essentiel (nom uniquement)
 * - **Standards CIO** : Respect conventions nommage infrastructure
 * - **Legacy planning** : Pr√©paration h√©ritage post-JO √©quipements
 *
 * ### üìç Types d'√©tablissements g√©r√©s contexte
 * - **Stades** : Football, athl√©tisme, c√©r√©monies ouverture/fermeture
 * - **Centres aquatiques** : Natation, plongeon, water-polo, natation synchronis√©e
 * - **Arenas couvertes** : Basketball, volleyball, handball, sports combat
 * - **Sites temporaires** : Beach-volley, BMX, skateboard installations √©ph√©m√®res
 * - **Centres entra√Ænement** : Pr√©paration √©quipes, √©chauffement athl√®tes
 * - **Infrastructure support** : M√©dias, broadcast, services organisateurs
 *
 * ## Limitations actuelles et am√©liorations futures
 *
 * ### ‚ùå Fonctionnalit√©s manquantes actuellement
 * - **Champs √©tendus** : Adresse, capacit√©, coordonn√©es GPS manquants
 * - **Validation avanc√©e** : Pas de contraintes longueur, format, unicit√©
 * - **Photos upload** : Pas d'interface ajout images √©tablissement
 * - **G√©olocalisation** : Pas de carte int√©gr√©e localisation
 * - **Cat√©gorisation** : Pas de type lieu (stade/centre/arena)
 * - **M√©tadonn√©es** : Statut, disponibilit√©, configuration manquants
 * - **Focus trap** : Pas de confinement focus dans modal
 * - **Escape key** : Fermeture ESC non impl√©ment√©e
 *
 * ### üöÄ √âvolutions possibles modal lieu
 * - **Formulaire √©tendu** : Champs adresse, capacit√©, type √©tablissement
 * - **Upload images** : Galerie photos lieu avec drag & drop
 * - **Carte interactive** : S√©lection coordonn√©es GPS sur carte
 * - **Validation temps r√©el** : Feedback instantan√© pendant saisie
 * - **Auto-compl√©tion** : Suggestions noms bas√©es existants
 * - **Templates lieux** : Pr√©-configurations par type √©tablissement
 * - **Pr√©visualisation** : Aper√ßu fiche lieu avant sauvegarde
 * - **Import donn√©es** : Ajout batch lieux via CSV/Excel
 * - **Historique modifications** : Journal changements lieu
 * - **Workflow approbation** : Validation hi√©rarchique cr√©ations
 *
 * ### üîß Am√©liorations UX et techniques
 * - **Animation entr√©e/sortie** : Transitions fluides ouverture/fermeture
 * - **Focus management** : Focus trap + restoration apr√®s fermeture
 * - **Keyboard shortcuts** : ESC fermeture, Ctrl+S sauvegarde rapide
 * - **Offline support** : Sauvegarde brouillon localStorage
 * - **Auto-save** : Sauvegarde automatique p√©riodique brouillon
 * - **Dirty form warning** : Alert perte donn√©es si fermeture
 * - **Progress indicator** : √âtapes formulaire si complexification
 * - **Field validation** : Validation temps r√©el par champ
 * - **Error recovery** : Suggestions correction erreurs validation
 * - **Success feedback** : Animation confirmation sauvegarde r√©ussie
 *
 * @param {Props} props - Propri√©t√©s du composant modal lieu
 * @param {boolean} props.isOpen - √âtat d'ouverture de la modal
 * @param {function} props.onClose - Callback fermeture modal
 * @param {function} props.onSave - Callback sauvegarde donn√©es lieu
 * @param {boolean} props.loading - √âtat de chargement pendant soumission
 * @param {string|null} props.error - Message d'erreur √† afficher
 * @param {Lieu} [props.lieu] - Lieu √† √©diter (optionnel, cr√©ation si absent)
 *
 * @returns {JSX.Element|null} Modal formulaire lieu ou null si ferm√©e
 *
 * @see {@link LieuxManagement} - Composant parent orchestrateur
 * @see {@link CreateLieuRequest} - Interface donn√©es cr√©ation lieu
 * @see {@link Lieu} - Type entit√© lieu pour √©dition
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Mode cr√©ation
 * <LieuModal
 *   isOpen={showCreateModal}
 *   onClose={() => setShowCreateModal(false)}
 *   onSave={(data) => createLieu(data)}
 *   loading={isCreating}
 *   error={createError}
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Mode √©dition
 * <LieuModal
 *   isOpen={showEditModal}
 *   onClose={() => setShowEditModal(false)}
 *   onSave={(data) => updateLieu(selectedLieu.id, data)}
 *   loading={isUpdating}
 *   error={updateError}
 *   lieu={selectedLieu}
 * />
 * ```
 */
interface Props {
    isOpen: boolean;
    onClose: () => void;
    onSave: (lieuData: CreateLieuRequest) => void;
    loading: boolean;
    error: string | null;
    lieu?: Lieu;
}

export default function LieuModal({ 
    isOpen, 
    onClose, 
    onSave, 
    loading, 
    error, 
    lieu
}: Props) {
    const [formData, setFormData] = useState<CreateLieuRequest>({
      nom: ''
    });

    // D√©terminer si c'est une cr√©ation ou une modification
    const isEditing = Boolean(lieu);
    const title = isEditing ? 'Modifier le lieu' : 'Cr√©er un nouveau lieu';
    const submitLabel = isEditing ? 'Modifier' : 'Cr√©er';
    const loadingLabel = isEditing ? 'Modification...' : 'Cr√©ation...';

    // Initialiser le formulaire avec les donn√©es du lieu en mode √©dition
    useEffect(() => {
      if (lieu) {
        setFormData({
          nom: lieu.nom
        });
      } else {
        setFormData({
          nom: ''
        });
      }
    }, [lieu]);

    const handleSubmit = (e: React.FormEvent) => {
      e.preventDefault();
      if (formData.nom.trim()) {
        onSave(formData);
      }
    };
    if (!isOpen) return null;

    return (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
                <div className="flex items-center justify-center mb-4" style={{ minHeight: '3rem' }}>
                    <h3 className="text-lg text-black font-semibold">{title}</h3>
                </div>

                {error && (
                    <div className="mb-4 text-sm text-red-600 bg-red-50 p-2 rounded">
                        {error}
                    </div>
                )}
              
                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <input
                            type="text"
                            value={formData.nom}
                            onChange={(e) => setFormData({ ...formData, nom: e.target.value })}
                            className="w-full px-3 py-2 border border-gray-300 text-black rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            placeholder="Ex: Stade de France"
                            required
                        />
                    </div>
                    
                    <div className="flex justify-end space-x-3 pt-4">
                        <button
                            type="button"
                            onClick={onClose}
                            className="px-4 py-2 text-sm font-medium text-gray-700 bg-gray-200 rounded-md hover:bg-gray-300"
                            disabled={loading}
                        >
                            Annuler
                        </button>
                        <button
                            type="submit"
                            className="px-4 py-2 text-sm font-medium text-white bg-blue-600 rounded-md hover:bg-blue-700 disabled:bg-blue-300"
                            disabled={loading}
                        >
                            {loading ? loadingLabel : submitLabel}
                        </button>
                    </div>
                </form>
            </div>
        </div>
    );
}
