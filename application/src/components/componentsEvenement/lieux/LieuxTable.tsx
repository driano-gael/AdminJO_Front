import { Lieu } from '@/types/sportEvenement/lieu';
import LieuxTableRow from './LieuxTableRow';
import Spinner from '@/components/spinner';

interface LieuxTableProps {
  lieux: Lieu[];
  loading: boolean;
  searchTerm: string;
  onRefresh: () => void;
  onDelete: (id: number) => void;
  onEdit: (lieu: Lieu) => void;
  error: string | null;
}

/**
 * Composant LieuxTable - Tableau principal d'affichage des lieux olympiques AdminJO
 *
 * Ce composant constitue l'interface centrale de visualisation des lieux olympiques
 * des Jeux Olympiques 2024. Il orchestre l'affichage sous forme de tableau structur√©
 * avec colonnes sp√©cialis√©es (nom lieu, actions), gestion compl√®te des √©tats
 * (chargement, erreurs, vide), syst√®me de rafra√Æchissement intelligent, et int√©gration
 * des actions CRUD via lignes interactives. Con√ßu pour l'administration JO, il suit
 * les standards AdminJO avec responsive design, feedback utilisateur riche, et gestion
 * optimis√©e des √©tablissements sportifs olympiques.
 *
 * ## Structure et affichage tableau sp√©cialis√© lieux olympiques
 *
 * ### üìä Architecture tableau simplifi√©e lieux
 * - **Container principal** : Card avec bg-white rounded-lg shadow-md
 * - **Header tableau** : Section avec titre + compteur + actions refresh
 * - **Corps tableau** : Structure HTML s√©mantique avec thead/tbody
 * - **Colonnes sp√©cialis√©es** : Nom du Lieu, Actions (structure √©pur√©e)
 * - **Overflow management** : overflow-x-auto pour d√©bordement horizontal
 * - **Responsive design** : min-w-full avec adaptation automatique
 * - **Elevation** : Ombre port√©e pour d√©tachement visuel du fond
 *
 * ### üè∑Ô∏è En-t√™te tableau avec m√©tadonn√©es dynamiques lieux
 * - **Titre contextuel** : "Lieux" avec compteur dynamique `(${lieux.length})`
 * - **Indicateur de chargement** : Spinner + "Chargement..." pendant loading
 * - **Bouton actualisation** : "üîÑ Actualiser" avec callback onRefresh
 * - **√âtat bouton** : D√©sactivation automatique pendant chargement
 * - **Layout horizontal** : justify-between pour r√©partition √©quilibr√©e
 * - **Feedback visuel** : Spinner small size pour indication non-intrusive
 * - **S√©parateur** : border-b border-gray-200 pour d√©limitation claire
 *
 * ### üìã Colonnes tableau optimis√©es m√©tier lieux olympiques
 * - **Colonne 1 - Nom lieu** : "Nom du Lieu" avec √©tablissements olympiques
 * - **Colonne 2 - Actions** : "Actions" avec boutons Modifier/Supprimer
 * - **Structure √©pur√©e** : Seulement 2 colonnes pour simplicit√© gestion
 * - **Headers style** : bg-gray-50 avec typographie uppercase tracking-wider
 * - **Alignement** : text-left pour lisibilit√© optimale donn√©es
 * - **Espacement** : px-6 py-3 pour respiration headers coh√©rente
 * - **S√©mantique** : thead/th structure correcte pour accessibilit√©
 *
 * ## Gestion des √©tats d'interface avanc√©e lieux
 *
 * ### ‚è≥ √âtats de chargement multicouches lieux
 * - **Loading global** : Spinner dans header + d√©sactivation refresh
 * - **Loading initial** : Message "Chargement des lieux..." avec spinner medium
 * - **√âtat vide + loading** : Centrage avec flex items-center justify-center
 * - **Feedback temps r√©el** : Indication "Chargement..." textuelle explicite
 * - **D√©sactivation actions** : disabled={loading} sur bouton refresh
 * - **Coh√©rence visuelle** : Spinners small/medium selon contexte
 * - **Non-intrusion** : Loading header n'affecte pas structure tableau
 *
 * ### üö® Gestion d'erreurs contextuelles lieux
 * - **Affichage erreur** : Bandeau rouge en haut tableau si error pr√©sent
 * - **Style erreur** : text-sm text-red-600 bg-red-50 p-2 rounded
 * - **Position** : Sous header, au-dessus tableau pour visibilit√©
 * - **Conditional rendering** : `{error && ...}` pour affichage conditionnel
 * - **Message brut** : Affichage direct contenu error string
 * - **Accessibilit√©** : Couleurs contrast√©es pour lisibilit√© erreurs
 * - **Persistance** : Erreur reste affich√©e jusqu'√† nouvel appel API
 *
 * ### üóÇÔ∏è √âtats vide avec messages contextuels intelligents lieux
 * - **Vide + recherche** : "Aucun lieu trouv√©" + terme recherche affich√©
 * - **Vide initial** : "Aucun lieu" + "Commencez par cr√©er votre premier lieu"
 * - **Vide + loading** : "Chargement des lieux..." avec spinner medium
 * - **Colspan adapt√©** : colSpan={2} pour occuper toutes colonnes tableau
 * - **Centrage vertical** : py-12 pour espacement g√©n√©reux √©tat vide
 * - **Hi√©rarchie messages** : text-lg font-medium + text-sm pour d√©tails
 * - **Guillemets recherche** : &ldquo;{searchTerm}&rdquo; pour mise en √©vidence
 *
 * ## Int√©gration lignes et actions CRUD lieux
 *
 * ### üîÑ Rendu dynamique des lignes lieux
 * - **Mapping optimis√©** : `lieux.map((lieu) => ...)` avec key stable
 * - **Composant ligne** : LieuxTableRow pour chaque lieu
 * - **Props transmission** : lieu, onDelete, onEdit vers lignes
 * - **Key unique** : lieu.id pour optimisation React reconciliation
 * - **Callbacks bubbling** : Remont√©e actions ligne vers composant parent
 * - **Donn√©es compl√®tes** : Objet lieu transmis int√©gralement
 * - **Performance** : Re-render optimis√© avec keys stables
 *
 * ### üîß Actions tableau et callbacks lieux
 * - **Refresh intelligent** : onRefresh() pr√©serve contexte recherche
 * - **Suppression lieu** : onDelete(id) avec ID num√©rique pour s√©curit√©
 * - **√âdition lieu** : onEdit(lieu) avec objet Lieu complet
 * - **D√©l√©gation logique** : Actions g√©r√©es par composants parents
 * - **√âtat pr√©serv√©** : Callbacks n'affectent pas √©tat local tableau
 * - **Feedback externe** : Notifications g√©r√©es par LieuxManagement
 * - **Synchronisation** : Mise √† jour automatique via props lieux
 *
 * ## Responsive design et accessibilit√© lieux
 *
 * ### üì± Adaptation multi-supports lieux
 * - **Scroll horizontal** : overflow-x-auto pour d√©bordement mobile
 * - **Largeur minimale** : min-w-full pour coh√©rence desktop
 * - **Container fluide** : Adaptation automatique largeur parent
 * - **Touch-friendly** : Zones d'action dimensionn√©es tactile
 * - **Breakpoints** : Gestion responsive via classes Tailwind
 * - **Dense mobile** : Maintien lisibilit√© sur petits √©crans
 * - **Navigation tactile** : Scroll horizontal fluide mobiles/tablettes
 *
 * ### ‚ôø Standards accessibilit√© tableau lieux
 * - **S√©mantique HTML** : Structure table/thead/tbody/th/td correcte
 * - **Headers explicites** : Colonnes titr√©es pour lecteurs √©cran
 * - **Contraste couleurs** : Respect ratios WCAG AA sur tous √©l√©ments
 * - **Focus management** : Navigation clavier coh√©rente dans tableau
 * - **Screen readers** : Structure logique pour synth√®se vocale
 * - **ARIA implicit** : S√©mantique table native suffisante
 * - **Alt text** : Messages d'√©tat lisibles par assistive technologies
 *
 * ## Int√©grations et d√©pendances lieux
 *
 * ### üîå Composants int√©gr√©s sp√©cialis√©s lieux
 * - **LieuxTableRow** : Composant ligne individuelle avec actions
 * - **Spinner** : Composant loading r√©utilisable avec tailles (small/medium)
 * - **Lieu type** : Interface TypeScript pour validation donn√©es
 * - **Props interface** : Contrat strict avec composant parent
 * - **Callbacks externes** : Fonctions handler fournies par parents
 * - **√âtat externe** : Pas d'√©tat local, donn√©es via props uniquement
 *
 * ### üì° Communication parent-enfant optimis√©e lieux
 * - **Props descendantes** : lieux, loading, error, searchTerm depuis parent
 * - **Callbacks ascendantes** : onRefresh, onDelete, onEdit vers parent
 * - **Transmission cibl√©e** : Props sp√©cifiques transmises aux lignes
 * - **√âtat centralis√©** : Gestion state dans LieuxManagement parent
 * - **R√©activit√©** : Re-render automatique sur changement props
 * - **Performance** : Minimal props drilling avec callbacks stables
 *
 * ## Performance et optimisations lieux
 *
 * ### ‚ö° Optimisations de rendu actuelles
 * - **Composant pur** : Pas d'√©tat local pour performance maximale
 * - **Keys optimis√©es** : lieu.id pour reconciliation React efficace
 * - **Conditional rendering** : Affichage conditionnel erreurs/loading/vide
 * - **CSS statique** : Classes Tailwind pr√©-compil√©es
 * - **Callbacks stables** : Props functions stables entre re-renders
 * - **Minimal re-renders** : D√©pendances props strictement n√©cessaires
 *
 * ### üéØ Candidats optimisation avanc√©e lieux
 * - **React.memo** : M√©morisation composant si re-renders fr√©quents
 * - **Virtualisation** : Rendu virtuel pour grandes listes lieux
 * - **Pagination** : D√©coupage donn√©es si volume important
 * - **Lazy loading** : Chargement progressif lieux visibles
 * - **Debouncing** : Optimisation refresh si appels fr√©quents
 * - **Memoized callbacks** : useMemo/useCallback dans parents
 *
 * ## Sp√©cificit√©s m√©tier lieux olympiques
 *
 * ### üèÖ Contexte Olympic Games administration lieux
 * - **Terminologie** : "Lieux" pour √©tablissements sportifs olympiques
 * - **Exemples concrets** : Stade de France, Centre Aquatique, Arena Bercy
 * - **Hi√©rarchie** : Lieux niveau infrastructure pour √©v√©nements/√©preuves
 * - **Gestion** : Interface organisateurs JO pour infrastructure
 * - **Standards** : Respect nomenclature officielle √©tablissements CIO
 * - **Importance** : Base infrastructure physique comp√©titions olympiques
 *
 * ### üìä Types de donn√©es lieux g√©r√©es
 * - **Structure Lieu** : id, nom (structure simplifi√©e)
 * - **Nom √©tablissement** : string pour d√©signation officielle
 * - **ID unique** : number pour identification syst√®me
 * - **Validation TypeScript** : Interfaces strictes pour s√©curit√©
 * - **API synchronis√©e** : Structure donn√©es align√©e backend/frontend
 * - **Extensibilit√©** : Support ajout propri√©t√©s futures (capacit√©, adresse)
 *
 * ## Gestion d'erreurs et edge cases lieux
 *
 * ### üõ°Ô∏è Robustesse et cas limites
 * - **Props null/undefined** : Gestion defensive avec valeurs d√©faut
 * - **Array vide** : √âtat vide avec message appropri√©
 * - **Error null** : Pas d'affichage bandeau si absence erreur
 * - **SearchTerm vide** : Message √©tat vide adapt√© selon contexte
 * - **Loading concurrent** : Gestion coh√©rente √©tats multiples
 * - **Network failures** : Affichage erreurs r√©seau dans bandeau
 *
 * ### üîÑ Recovery et √©tats de r√©cup√©ration
 * - **Retry mechanism** : Bouton refresh pour nouvelle tentative
 * - **Error clearing** : Effacement erreur sur nouveau chargement
 * - **State consistency** : Coh√©rence √©tat loading/error/data
 * - **Graceful degradation** : Fonctionnement partiel si erreurs
 * - **User feedback** : Messages clairs pour guider utilisateur
 * - **Fallback content** : Contenu alternatif si √©chec chargement
 *
 * ## Am√©liorations et extensions futures
 *
 * ### üöÄ Fonctionnalit√©s avanc√©es possibles
 * - **Tri colonnes** : Ordonnancement par nom lieu alphab√©tique
 * - **Pagination int√©gr√©e** : D√©coupage grandes listes dans tableau
 * - **Filtres avanc√©s** : Crit√®res multiples dans headers colonnes
 * - **S√©lection multiple** : Checkboxes pour actions group√©es
 * - **Export donn√©es** : CSV/PDF depuis tableau avec s√©lection
 * - **Colonnes configurables** : Masquage/affichage colonnes dynamique
 * - **Densit√© affichage** : Mode compact/standard configurable
 *
 * ### üìä Enrichissements donn√©es lieux
 * - **Colonnes suppl√©mentaires** : Capacit√©, adresse, statut lieu
 * - **Indicateurs visuels** : Ic√¥nes statut/type √©tablissement
 * - **Badges m√©tadonn√©es** : Statut disponibilit√©/maintenance
 * - **Liens navigation** : Acc√®s d√©tail lieu depuis tableau
 * - **Miniatures** : Photos √©tablissements dans lignes
 * - **G√©olocalisation** : Coordonn√©es GPS et liens cartes
 * - **Informations temps r√©el** : Occupation/√©v√©nements en cours
 *
 * ### üîß Optimisations techniques avanc√©es
 * - **Virtual scrolling** : Rendu virtuel tr√®s grandes listes
 * - **Intersection observer** : Chargement lazy images/donn√©es
 * - **Web Workers** : Traitement tri/filtre en arri√®re-plan
 * - **IndexedDB cache** : Cache local persistant lieux fr√©quents
 * - **Service Worker** : Synchronisation hors-ligne modifications
 * - **Real-time updates** : WebSocket pour mises √† jour temps r√©el
 * - **Progressive loading** : Chargement progressif m√©tadonn√©es
 *
 * @param {LieuxTableProps} props - Propri√©t√©s du composant tableau lieux
 * @param {Lieu[]} props.lieux - Array des lieux olympiques √† afficher
 * @param {boolean} props.loading - √âtat de chargement pour feedback UI
 * @param {string} props.searchTerm - Terme de recherche pour messages contextuels
 * @param {function} props.onRefresh - Callback actualisation donn√©es
 * @param {function} props.onDelete - Callback suppression lieu par ID
 * @param {function} props.onEdit - Callback √©dition lieu avec objet complet
 * @param {string|null} props.error - Message d'erreur √† afficher si pr√©sent
 *
 * @returns {JSX.Element} Tableau complet gestion lieux olympiques avec √©tats
 *
 * @see {@link LieuxTableRow} - Composant ligne individuelle tableau
 * @see {@link Spinner} - Composant loading states r√©utilisable
 * @see {@link Lieu} - Interface TypeScript d√©finition lieu
 * @see {@link LieuxManagement} - Composant parent orchestrateur
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * <LieuxTable
 *   lieux={lieuxList}
 *   loading={isLoading}
 *   searchTerm={currentSearch}
 *   onRefresh={() => loadData()}
 *   onDelete={(id) => handleDelete(id)}
 *   onEdit={(lieu) => handleEdit(lieu)}
 *   error={apiError}
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Avec gestion √©tats vides
 * <LieuxTable
 *   lieux={[]}
 *   loading={false}
 *   searchTerm=""
 *   onRefresh={refreshData}
 *   onDelete={deleteLieu}
 *   onEdit={editLieu}
 *   error={null}
 * />
 * ```
 */
export default function LieuxTable({
  lieux, 
  loading, 
  searchTerm, 
  onRefresh, 
  onDelete, 
  onEdit,
  error 
}: LieuxTableProps) {
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900">
            Lieux ({lieux.length})
          </h2>
          <div className="flex items-center space-x-2">
            {loading && (
              <div className="flex items-center text-sm text-gray-500">
                <Spinner size="small" />
                Chargement...
              </div>
            )}
            <button
              onClick={onRefresh}
              className="text-blue-600 hover:text-blue-800 text-sm font-medium"
              disabled={loading}
            >
              üîÑ Actualiser
            </button>
          </div>
        </div>
        {error && (
          <div className="mt-2 text-sm text-red-600 bg-red-50 p-2 rounded">
            {error}
          </div>
        )}
      </div>
      
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Nom du Lieu
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {lieux.length === 0 ? (
              <tr>
                <td colSpan={2} className="px-6 py-12 text-center text-gray-500">
                  {loading ? (
                    <div className="flex items-center justify-center">
                      <Spinner size="medium" />
                      Chargement des lieux...
                    </div>
                  ) : searchTerm ? (
                    <div>
                      <p className="text-lg font-medium">Aucun lieu trouv√©</p>
                      <p className="text-sm">Aucun lieu ne correspond √† votre recherche &ldquo;{searchTerm}&rdquo;</p>
                    </div>
                  ) : (
                    <div>
                      <p className="text-lg font-medium">Aucun lieu</p>
                      <p className="text-sm">Commencez par cr√©er votre premier lieu</p>
                    </div>
                  )}
                </td>
              </tr>
            ) : (
              lieux.map((lieu) => (
                <LieuxTableRow
                  key={lieu.id}
                  lieu={lieu}
                  onDelete={onDelete}
                  onEdit={onEdit}
                />
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
