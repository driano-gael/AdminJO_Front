import { Lieu } from '@/types/sportEvenement/lieu';

interface Props {
  lieu: Lieu;
  onDelete: (id: number) => void;
  onEdit: (lieu: Lieu) => void;
}

/**
 * Composant LieuxTableRow - Ligne de tableau pour lieu olympique AdminJO
 *
 * Ce composant repr√©sente une ligne individuelle dans le tableau des lieux olympiques
 * des Jeux Olympiques 2024. Il affiche les informations essentielles d'un lieu (nom
 * de l'√©tablissement olympique) avec les actions CRUD directes via boutons int√©gr√©s.
 * Con√ßu pour l'interface d'administration des Jeux Olympiques 2024, il suit les
 * standards de design AdminJO avec states hover interactifs et gestion optimis√©e
 * des √©tablissements sportifs olympiques (Stade de France, Centre Aquatique, etc.).
 *
 * ## Donn√©es affich√©es r√©ellement impl√©ment√©es
 *
 * ### üèüÔ∏è Nom du lieu olympique principal
 * - **Nom √©tablissement** : `lieu.nom` avec typographie medium accentu√©e
 * - **Contenu officiel** : D√©signation officielle lieu olympique (ex: "Stade de France", "Centre Aquatique")
 * - **Style** : text-sm font-medium text-gray-900 pour lisibilit√© optimale
 * - **Colonne d√©di√©e** : Premi√®re colonne tableau avec largeur adaptative
 * - **Contenu structur√©** : div wrapper pour coh√©rence layout et alignement
 * - **Typographie** : Police medium pour hi√©rarchie visuelle informations
 * - **Importance** : Identifiant principal du lieu pour utilisateurs administrateurs
 *
 * ## Actions utilisateur CRUD int√©gr√©es
 *
 * ### ‚úèÔ∏è Action de modification lieu
 * - **Bouton "Modifier"** : D√©clenche √©dition lieu olympique complet
 * - **Callback** : `onEdit(lieu)` avec objet lieu complet
 * - **Style** : text-blue-600 hover:text-blue-900 pour feedback visuel
 * - **Position** : Premi√®re action dans colonne Actions
 * - **Espacement** : mr-3 pour s√©paration avec bouton suppression
 * - **Interaction** : Hover effect avec assombrissement couleur
 * - **Accessibilit√©** : Texte explicite "Modifier" pour lecteurs √©cran
 * - **Donn√©es compl√®tes** : Transmission objet avec toutes propri√©t√©s lieu
 *
 * ### üóëÔ∏è Action de suppression lieu
 * - **Bouton "Supprimer"** : D√©clenche suppression lieu olympique
 * - **Callback** : `onDelete(lieu.id)` avec ID num√©rique lieu
 * - **Style** : text-red-600 hover:text-red-900 couleur danger
 * - **Position** : Seconde action dans colonne Actions
 * - **Feedback visuel** : Rouge pour action destructive standard
 * - **Confirmation** : Gestion confirmations dans composants parents
 * - **S√©curit√©** : Transmission ID uniquement pour limitation exposition
 * - **Impact m√©tier** : Suppression lieu affecte √©v√©nements associ√©s
 *
 * ## Structure et layout ligne tableau
 *
 * ### üé® Design ligne interactive sp√©cialis√©e lieux
 * - **√âl√©ment HTML** : `<tr>` s√©mantique pour structure tableau
 * - **Hover effect** : hover:bg-gray-50 pour feedback survol ligne
 * - **Colonnes** : 2 colonnes (Nom lieu, Actions) - Structure simplifi√©e
 * - **Padding cellules** : px-6 py-4 pour respiration optimale
 * - **Espacement** : whitespace-nowrap sur donn√©es principales
 * - **Style coh√©rent** : Alignement avec headers tableau parent
 * - **Compacit√©** : Structure √©pur√©e focalis√©e sur essentiel
 *
 * ### üì± Responsive et accessibilit√©
 * - **Layout adaptatif** : Colonnes s'adaptent largeur container
 * - **Overflow** : Gestion d√©bordement via container parent
 * - **Touch-friendly** : Boutons dimensionn√©s interaction tactile
 * - **Contraste** : Couleurs respectant standards WCAG AA
 * - **S√©mantique** : Structure `<td>` correcte pour lecteurs √©cran
 * - **Navigation** : Ordre tabulation logique gauche-droite
 * - **Simplicit√©** : Interface √©pur√©e pour gestion efficace lieux
 *
 * ## Sp√©cificit√©s m√©tier lieux olympiques
 *
 * ### üèÖ Contexte m√©tier lieux JO 2024
 * - **Terminologie** : "Lieu" pour √©tablissements sportifs olympiques
 * - **Exemples concrets** : Stade de France, Centre Aquatique, Arena Bercy
 * - **Relations** : Lieux ‚Üí √âv√©nements (1-N), base infrastructure JO
 * - **Hi√©rarchie** : Lieux niveau infrastructure pour √©v√©nements/√©preuves
 * - **Gestion organisateurs** : Interface back-office √©quipes logistique JO
 * - **Standards CIO** : Respect nomenclature officielle √©tablissements
 * - **Importance critique** : Infrastructure physique pour comp√©titions
 *
 * ### üìä Types de donn√©es lieu g√©r√©es
 * - **Nom lieu** : string - D√©signation officielle √©tablissement olympique
 * - **ID lieu** : number - Identifiant unique lieu
 * - **Structure** : Type Lieu import√© depuis types/sportEvenement
 * - **Validation** : Types TypeScript strictes pour s√©curit√©
 * - **Relations futures** : Extensible pour capacit√©s, coordonn√©es, etc.
 * - **Standards JO** : Nomenclature align√©e organisation olympique
 *
 * ## Performance et optimisations
 *
 * ### ‚ö° Optimisations actuelles
 * - **Composant pur** : Pas d'√©tat local pour performance
 * - **Props stables** : D√©pendances minimales re-rendering
 * - **CSS statique** : Classes Tailwind pr√©-compil√©es
 * - **Callbacks externes** : Gestion state dans composants parents
 * - **S√©lecteur optimal** : Acc√®s direct propri√©t√©s sans calculs
 * - **Structure simple** : Minimal DOM pour performance maximale
 *
 * ### üîÑ Gestion re-renders optimis√©e
 * - **M√©morisation** : Candidat React.memo si n√©cessaire
 * - **Props drilling minimal** : Callbacks cibl√©s
 * - **Immutabilit√©** : Props objets stables entre renders
 * - **Keys stables** : lieu.id pour optimisation React keys
 * - **Conditional logic** : Minimal pour √©viter re-calculs
 * - **Lightweight** : Composant l√©ger pour listes importantes
 *
 * ## S√©curit√© et validation
 *
 * ### üîí Aspects s√©curitaires
 * - **Validation props** : Interface TypeScript stricte
 * - **Sanitisation** : Affichage s√©curis√© donn√©es textuelles
 * - **ID transmission** : Seul ID transmis pour suppression
 * - **XSS prevention** : React √©chappe automatiquement contenu
 * - **Type safety** : Interfaces Lieu et Props strictes
 * - **Data consistency** : Structure donn√©es garantie par types TS
 *
 * ### ‚úÖ Validation des donn√©es affich√©es
 * - **Nom lieu** : Affichage string avec √©chappement auto
 * - **Actions callbacks** : Validation types param√®tres
 * - **Coh√©rence** : Structure donn√©es garantie par interfaces
 * - **Robustesse** : Gestion d√©fensive propri√©t√©s lieu
 * - **Int√©grit√©** : Validation ID lieu pour actions
 *
 * ## Am√©liorations et extensions possibles
 *
 * ### üöÄ Am√©liorations fonctionnelles
 * - **Informations √©tendues** : Capacit√©, adresse, coordonn√©es
 * - **Actions suppl√©mentaires** : Duplication, archivage lieu
 * - **Liens navigation** : Navigation vers d√©tail lieu
 * - **Statut lieu** : Indicateurs disponibilit√©/maintenance
 * - **Actions group√©es** : S√©lection multiple lieux
 * - **Export donn√©es** : Export liste lieux s√©lectionn√©s
 *
 * ### üé® Am√©liorations visuelles
 * - **Ic√¥nes lieux** : Symboles visuels type √©tablissement
 * - **Animations** : Transitions smooth sur hover states
 * - **Loading states** : Squelettes pendant chargements
 * - **Badges statut** : Indicateurs visuels √©tat lieu
 * - **Density modes** : Options affichage compact/standard
 * - **Color coding** : Couleurs th√©matiques par type lieu
 * - **Images lieux** : Miniatures √©tablissements olympiques
 *
 * ### üîß Optimisations techniques
 * - **Virtual scrolling** : Rendu virtuel grandes listes lieux
 * - **Memoization** : React.memo pour √©viter re-renders inutiles
 * - **Code splitting** : Chargement diff√©r√© si logique complexifi√©e
 * - **Prefetching** : Pr√©-chargement d√©tails lieux probables
 * - **Caching intelligent** : Cache local lieux fr√©quents
 * - **Intersection observer** : Lazy loading images lieux
 *
 * @param {Props} props - Propri√©t√©s du composant
 * @param {Lieu} props.lieu - Objet lieu olympique √† afficher
 * @param {function} props.onDelete - Callback suppression avec ID lieu
 * @param {function} props.onEdit - Callback √©dition avec objet lieu complet
 *
 * @returns {JSX.Element} Ligne de tableau interactive avec donn√©es lieu et actions
 *
 * @see {@link LieuxTable} - Tableau parent contenant les lignes
 * @see {@link Lieu} - Interface TypeScript de l'objet lieu
 * @see {@link LieuxManagement} - Gestionnaire principal fournissant callbacks
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Utilisation dans LieuxTable
 * {lieux.map((lieu) => (
 *   <LieuxTableRow
 *     key={lieu.id}
 *     lieu={lieu}
 *     onDelete={handleDelete}
 *     onEdit={handleEdit}
 *   />
 * ))}
 * ```
 *
 * @example
 * ```tsx
 * // Structure objet lieu attendu
 * const lieu: Lieu = {
 *   id: 1,
 *   nom: "Stade de France"
 * };
 * ```
 */
export default function LieuxTableRow({ lieu, onDelete, onEdit }: Props) {
  return (
    <tr className="hover:bg-gray-50">
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm font-medium text-gray-900">{lieu.nom}</div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <button 
          onClick={() => onEdit(lieu)}
          className="text-blue-600 hover:text-blue-900 mr-3"
        >
          Modifier
        </button>
        <button 
          onClick={() => onDelete(lieu.id)}
          className="text-red-600 hover:text-red-900"
        >
          Supprimer
        </button>
      </td>
    </tr>
  );
}
