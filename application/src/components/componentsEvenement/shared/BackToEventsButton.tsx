'use client';

import { useRouter } from 'next/navigation';

/**
 * Composant BackToEventsButton - Bouton navigation retour √©v√©nements AdminJO
 *
 * Ce composant r√©utilisable fournit une navigation contextuelle standardis√©e pour retourner
 * √† la gestion globale des √©v√©nements olympiques depuis les sous-modules sp√©cialis√©s
 * (disciplines, lieux, √©preuves). Il centralise la logique de navigation avec Next.js
 * App Router, √©limine la duplication de code entre composants, et assure une exp√©rience
 * utilisateur coh√©rente pour la navigation hi√©rarchique dans l'√©cosyst√®me AdminJO des
 * Jeux Olympiques 2024. Design adaptatif avec customisation possible du style et texte
 * tout en maintenant les standards visuels et d'accessibilit√© AdminJO.
 *
 * ## Fonctionnalit√©s de navigation r√©ellement impl√©ment√©es
 *
 * ### üîô Navigation hi√©rarchique contextualis√©e √©v√©nements
 * - **Destination fixe** : /pagesEvenements route principale gestion √©v√©nements
 * - **Router Next.js** : useRouter() hook pour navigation client-side
 * - **Push navigation** : router.push() pour ajout historique navigateur
 * - **Bouton universel** : Utilisable dans tous sous-modules √©v√©nements
 * - **Centralisation logique** : √âvite duplication code navigation
 * - **URL absolue** : /pagesEvenements chemin constant ind√©pendant contexte
 * - **Contexte olympique** : Retour vers hub central gestion √©v√©nements JO
 *
 * ### üé® Interface utilisateur standardis√©e personnalisable
 * - **Texte par d√©faut** : "‚Ü©Ô∏è gestion globale √©v√®nements" avec emoji directeur
 * - **Classe par d√©faut** : bg-gray-600 hover:bg-gray-700 style AdminJO coh√©rent
 * - **Props customisation** : className et text optionnels pour adaptation
 * - **Transition fluide** : transition-colors pour animation hover
 * - **Taille optimis√©e** : px-4 py-2 pour zone clic confortable
 * - **Typography** : text-sm font-medium pour lisibilit√© optimale
 * - **Responsive** : rounded-md coins arrondis coh√©rents design system
 *
 * ### üîß Configuration flexible et r√©utilisabilit√©
 * - **Props optionnelles** : className et text avec valeurs d√©faut sens√©es
 * - **Override complet** : Possibilit√© remplacement style total via className
 * - **Texte adaptable** : text prop pour contextes sp√©ciaux (langues, etc.)
 * - **Compatibilit√©** : Fonctionne tous sous-modules √©v√©nements
 * - **Maintenance centralis√©e** : Modifications navigation propag√©es automatiquement
 * - **Standards coh√©rents** : M√™me logique navigation partout dans app
 *
 * ## Architecture technique et int√©gration Next.js
 *
 * ### üöÄ Client Component Next.js 13+ App Router
 * - **'use client'** : Directive pour composant interactif c√¥t√© client
 * - **useRouter hook** : Navigation programmable App Router Next.js
 * - **Client-side routing** : Navigation sans rechargement page
 * - **History management** : push() ajoute entr√©e historique navigateur
 * - **Performant** : Pr√©chargement routes et optimisations Next.js
 * - **SEO friendly** : URLs propres maintenues pendant navigation
 * - **Hot reloading** : Compatible rechargement d√©veloppement Next.js
 *
 * ### üì° Gestion d'√©tat et lifecycle
 * - **Stateless component** : Pas d'√©tat local pour simplicit√© maximale
 * - **Effect-free** : Pas d'useEffect, composant enti√®rement synchrone
 * - **Props-driven** : Configuration via props, pas de logique interne
 * - **Immutable** : Pas de mutations √©tat, seulement lecture props
 * - **Pure function** : R√©sultat d√©terministe bas√© uniquement sur props
 * - **Memory efficient** : Minimal footprint m√©moire, pas de subscriptions
 * - **Fast render** : Rendu rapide sans calculs complexes
 *
 * ## Exp√©rience utilisateur et design patterns
 *
 * ### üéØ UX navigation contextuelle optimis√©e
 * - **Breadcrumb visuel** : Indique position dans hi√©rarchie navigation
 * - **Action pr√©visible** : Emoji ‚Ü©Ô∏è et texte explicite pour clart√©
 * - **Feedback imm√©diat** : Hover effect pour confirmation interaction
 * - **Terminologie claire** : "gestion globale √©v√®nements" descriptif
 * - **Position logique** : G√©n√©ralement coin sup√©rieur gauche headers
 * - **Escape route** : Toujours disponible pour sortir sous-modules
 * - **Context preservation** : Navigation ne perd pas travail en cours
 *
 * ### üîß √âtats interactifs et feedback visuel
 * - **√âtat normal** : bg-gray-600 couleur neutre non-intrusive
 * - **√âtat hover** : bg-gray-700 assombrissement pour feedback
 * - **Transition smooth** : transition-colors pour animation fluide
 * - **Disabled state** : Pas impl√©ment√© (navigation toujours possible)
 * - **Focus state** : Focus ring navigateur par d√©faut (am√©liorable)
 * - **Active state** : Utilise hover pendant clic
 * - **Loading state** : Pas d'indicateur pendant navigation (instantan√©e)
 *
 * ## Customisation et extensibilit√©
 *
 * ### üé® Personnalisation apparence
 * - **className override** : Remplacement complet classes CSS par d√©faut
 * - **text override** : Modification texte affich√© sur bouton
 * - **Valeurs par d√©faut** : Fallback sens√©s si props non fournies
 * - **Coh√©rence forc√©e** : Valeurs d√©faut align√©es design system AdminJO
 * - **Flexibilit√© totale** : Adaptable besoins sp√©cifiques contextes
 * - **Maintenance ais√©e** : Changements globaux via props par d√©faut
 *
 * ### üîó Int√©gration patterns composants
 * - **Drop-in replacement** : Remplace boutons navigation ad-hoc existants
 * - **Header integration** : S'int√®gre naturellement headers sous-modules
 * - **Layout flexible** : Adaptation automatique containers parents
 * - **Spacing external** : Pas de margins externes, gestion parent
 * - **Z-index neutral** : Pas de probl√®mes superposition √©l√©ments
 * - **Event bubbling** : onClick ne stop pas propagation autres events
 *
 * ## Responsive design et accessibilit√©
 *
 * ### üì± Adaptation multi-supports
 * - **Touch-friendly** : py-2 hauteur suffisante interaction tactile mobile
 * - **Readable text** : text-sm taille optimale tous √©crans
 * - **Compact design** : px-4 largeur raisonnable √©crans √©troits
 * - **Native responsive** : Classes Tailwind adaptatives automatiques
 * - **Mobile first** : Fonctionne parfaitement petits √©crans
 * - **Desktop enhanced** : Hover effects riches sur desktop
 * - **Cross-platform** : Compatible iOS, Android, desktop browsers
 *
 * ### ‚ôø Standards accessibilit√© navigation
 * - **S√©mantique button** : √âl√©ment <button> natif pour lecteurs √©cran
 * - **Texte descriptif** : Contenu textuel explicite pour synth√®se vocale
 * - **Navigation clavier** : Tab/Enter support natif √©l√©ment button
 * - **Contraste suffisant** : text-white sur bg-gray-600 conforme WCAG
 * - **Focus visible** : Focus ring navigateur par d√©faut visible
 * - **Screen reader** : Emoji ‚Ü©Ô∏è ignor√©, texte lu correctement
 * - **Landmark implicit** : Navigation button dans contexte header
 *
 * ### üîß Am√©liorations accessibilit√© possibles
 * - **ARIA label** : aria-label="Retourner √† la gestion des √©v√©nements"
 * - **Focus ring** : Custom focus:ring-2 focus:ring-offset-2 pour visibilit√©
 * - **Keyboard shortcuts** : Support Alt+‚Üê pour navigation rapide
 * - **Screen reader** : aria-describedby pour description contextuelle
 * - **High contrast** : Modes contraste √©lev√© pour malvoyants
 * - **Reduced motion** : respect prefers-reduced-motion pour animations
 *
 * ## Performance et optimisations techniques
 *
 * ### ‚ö° Optimisations actuelles
 * - **Stateless design** : Pas de re-renders inutiles sans √©tat local
 * - **Minimal dependencies** : Seulement useRouter, pas de deps lourdes
 * - **CSS classes** : Tailwind pr√©-compil√© pour performance CSS
 * - **No side effects** : Pas d'effects ou subscriptions co√ªteuses
 * - **Pure component** : Candidat id√©al React.memo si n√©cessaire
 * - **Small bundle** : Code minimal impacte peu taille bundle
 * - **Tree shaking** : Imports optimis√©s pour dead code elimination
 *
 * ### üéØ Optimisations possibles futures
 * - **React.memo** : M√©morisation si utilis√© dans listes ou re-renders fr√©quents
 * - **useCallback** : M√©morisation handleBackToEvents si pass√© en prop
 * - **Prefetch route** : Pr√©chargement /pagesEvenements via Next.js
 * - **Suspense boundary** : Loading boundary pour navigation lente
 * - **Error boundary** : Gestion erreurs navigation avec fallback UI
 * - **Analytics** : Tracking usage navigation pour UX insights
 *
 * ## Contexte m√©tier √©v√©nements olympiques JO 2024
 *
 * ### üèÖ Sp√©cificit√©s domaine olympique navigation
 * - **Hi√©rarchie √©v√©nements** : Navigation depuis disciplines/lieux/√©preuves vers hub
 * - **Terminologie m√©tier** : "gestion globale √©v√®nements" langage organisateurs
 * - **Workflow organisationnel** : Retour contexte principal apr√®s t√¢ches sp√©cialis√©es
 * - **Architecture modulaire** : Sous-modules √©v√©nements avec navigation unifi√©e
 * - **Standards CIO** : Respect patterns navigation syst√®mes olympiques
 * - **Efficiency op√©rationnelle** : Navigation rapide pour √©quipes JO sous pression
 * - **Context switching** : Passage fluide entre domaines fonctionnels
 *
 * ### üìä Relations architecture √©v√©nements AdminJO
 * - **Hub central** : /pagesEvenements comme point focal gestion
 * - **Sous-modules** : disciplines, lieux, √©preuves sous hi√©rarchie √©v√©nements
 * - **Navigation bidirectionnelle** : Aller vers sp√©cialis√©s, revenir vers global
 * - **Breadcrumb implicit** : Bouton indique position dans arborescence
 * - **State preservation** : Navigation pr√©serve contexte global √©v√©nements
 * - **Role-based** : Navigation adapt√©e r√¥les administrateurs JO
 *
 * ## Utilisation dans √©cosyst√®me AdminJO
 *
 * ### üîå Int√©gration composants headers existants
 * - **LieuxHeader** : Utilis√© dans en-t√™te gestion lieux olympiques
 * - **DisciplinesHeader** : Navigation retour depuis gestion disciplines
 * - **EpreuvesHeader** : Retour contexte depuis gestion √©preuves
 * - **Headers uniformes** : M√™me navigation tous sous-modules √©v√©nements
 * - **Layout consistency** : Position standard coin sup√©rieur gauche
 * - **Visual hierarchy** : Navigation + Titre + Actions pattern
 *
 * ### üìç Position dans architecture composants
 * - **Dossier shared** : components/componentsEvenement/shared/
 * - **R√©utilisabilit√©** : Import√© par multiples headers sous-modules
 * - **Centralisation** : Single source of truth logique navigation
 * - **Maintenance** : Modifications propag√©es automatiquement tous usages
 * - **Testing** : Tests unitaires centralis√©s pour toutes int√©grations
 * - **Documentation** : Pattern r√©utilisable document√© une fois
 *
 * ## Patterns de d√©veloppement et bonnes pratiques
 *
 * ### üèóÔ∏è Architecture composant exemplaire
 * - **Single responsibility** : Une fonction navigation claire et pr√©cise
 * - **Composition over inheritance** : Props pour customisation vs h√©ritage
 * - **Inversion of control** : Configuration via props externes
 * - **DRY principle** : √âlimine duplication logique navigation
 * - **Open/closed principle** : Ouvert extension via props, ferm√© modification
 * - **Dependency injection** : Router inject√© via hook vs prop drilling
 *
 * ### üîß Patterns React modernes
 * - **Hooks usage** : useRouter seul hook n√©cessaire, usage optimal
 * - **Props destructuring** : Destructuration avec defaults pour lisibilit√©
 * - **TypeScript strict** : Interface props avec optionalit√© explicite
 * - **Function component** : Pattern moderne vs class component
 * - **No render props** : Simplicit√© vs patterns complexes
 * - **Custom hook potential** : Logique extractible en hook si complexification
 *
 * ## Limitations et am√©liorations futures
 *
 * ### ‚ùå Limitations actuelles identifi√©es
 * - **Route hardcod√©e** : /pagesEvenements pas configurable dynamiquement
 * - **Pas de loading** : Aucun indicateur pendant navigation
 * - **Pas de confirmation** : Navigation imm√©diate sans warning perte donn√©es
 * - **Pas d'analytics** : Aucun tracking usage navigation
 * - **√âtat global ignor√©** : Pas de v√©rification √©tat application
 * - **Pas de cache** : Aucune optimisation pr√©chargement route
 * - **Error handling basique** : Pas de gestion erreurs navigation
 *
 * ### üöÄ √âvolutions possibles prioritaires
 * - **Route configurable** : Prop route pour flexibilit√© destinations
 * - **Confirmation modal** : Warning si formulaires non sauvegard√©s ouverts
 * - **Loading states** : Spinner pendant navigation lente
 * - **Breadcrumb integration** : Int√©gration syst√®me breadcrumb global
 * - **Analytics tracking** : M√©triques usage navigation pour UX
 * - **Keyboard shortcuts** : Alt+‚Üê support navigation clavier
 * - **Route prefetching** : Optimisation Next.js pr√©chargement
 * - **Error boundaries** : Gestion robuste erreurs navigation
 * - **A11y enhancements** : ARIA labels et descriptions √©tendues
 * - **Theme integration** : Support themes sombre/clair AdminJO
 *
 * ### üîß Am√©liorations techniques avanc√©es
 * - **Suspense integration** : Loading boundaries pour navigation async
 * - **Error recovery** : Retry logic si navigation √©choue
 * - **State persistence** : Sauvegarde √©tat local avant navigation
 * - **Route guards** : V√©rification permissions avant navigation
 * - **Deep linking** : Support param√®tres URL pour navigation contextuelle
 * - **Progressive enhancement** : Fallback href si JavaScript disabled
 * - **Performance monitoring** : M√©triques temps navigation
 * - **Cache strategies** : Optimisation cache Next.js routes
 *
 * @param {BackToEventsButtonProps} props - Configuration du bouton navigation
 * @param {string} [props.className] - Classes CSS custom pour override styling
 * @param {string} [props.text] - Texte affich√© sur bouton (default: "‚Ü©Ô∏è gestion globale √©v√®nements")
 *
 * @returns {JSX.Element} Bouton navigation retour vers gestion √©v√©nements
 *
 * @see {@link LieuxHeader} - Utilise ce bouton pour navigation retour
 * @see {@link DisciplinesHeader} - Utilise ce bouton pour navigation retour
 * @see {@link EpreuvesHeader} - Utilise ce bouton pour navigation retour
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Usage basique avec styles par d√©faut
 * <BackToEventsButton />
 * ```
 *
 * @example
 * ```tsx
 * // Customisation style et texte
 * <BackToEventsButton
 *   className="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg"
 *   text="‚Üê Retour √©v√©nements"
 * />
 * ```
 *
 * @example
 * ```tsx
 * // Int√©gration dans header sous-module
 * function SubModuleHeader() {
 *   return (
 *     <header className="flex justify-between items-center">
 *       <BackToEventsButton />
 *       <h1>Gestion Sous-Module</h1>
 *       <button>Action Principale</button>
 *     </header>
 *   );
 * }
 * ```
 */
interface BackToEventsButtonProps {
  className?: string;
  text?: string;
}

/**
 * Composant r√©utilisable pour le bouton de retour vers la gestion globale des √©v√©nements
 * Remplace la logique dupliqu√©e dans tous les composants de management
 */
export default function BackToEventsButton({ 
  className = "bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors",
  text = "‚Ü©Ô∏è gestion globale √©v√®nements"
}: BackToEventsButtonProps) {
  const router = useRouter();

  const handleBackToEvents = () => {
    router.push('/pagesEvenements');
  };

  return (
    <button
      onClick={handleBackToEvents}
      className={className}
    >
      {text}
    </button>
  );
}
