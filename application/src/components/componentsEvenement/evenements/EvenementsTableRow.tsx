import { Evenement} from '@/types/sportEvenement/evenement';
import EventStatus from './EvenementsStatus';
import EvenementEpreuve from './EvenementEpreuves';

interface Props {
  event: Evenement;
  onDelete: (id: number) => void;
  onEdit: (event: Evenement) => void;
}

/**
 * Composant EvenementsTableRow - Ligne de tableau pour √©v√©nement sportif olympique AdminJO
 *
 * Ce composant repr√©sente une ligne individuelle dans le tableau des √©v√©nements sportifs
 * olympiques. Il affiche les informations compl√®tes d'un √©v√©nement (description, √©preuves,
 * date/heure, lieu, statut) avec sous-composants sp√©cialis√©s int√©gr√©s et fournit les actions
 * CRUD directes via boutons. Con√ßu pour l'interface d'administration des Jeux Olympiques 2024,
 * il orchestre l'affichage de donn√©es complexes avec relations multiples (√©preuves, lieux)
 * et calcul de statut temps r√©el selon planning.
 *
 * ## Donn√©es affich√©es et sous-composants int√©gr√©s
 *
 * ### üìù Description √©v√©nement principale
 * - **Description compl√®te** : `event.description` avec typographie medium accentu√©e
 * - **Contenu riche** : Titre descriptif √©v√©nement sportif (ex: "Finale natation 100m")
 * - **Style** : text-sm font-medium text-gray-900 pour lisibilit√© optimale
 * - **Colonne d√©di√©e** : Premi√®re colonne tableau avec largeur adaptative
 * - **Contenu structur√©** : div wrapper pour coh√©rence layout et alignement
 * - **Typographie** : Police medium pour hi√©rarchie visuelle informations
 *
 * ### üèÖ √âpreuves associ√©es via EvenementEpreuve (sous-composant int√©gr√©)
 * - **Composant sp√©cialis√©** : EvenementEpreuve pour affichage √©preuves complexes
 * - **Donn√©es relationnelles** : `event.epreuves` array transmis int√©gralement
 * - **Gestion multiple** : Support affichage plusieurs √©preuves par √©v√©nement
 * - **D√©l√©gation affichage** : Logique rendu d√©l√©gu√©e au sous-composant
 * - **Relations normalis√©es** : Chaque √©v√©nement peut avoir plusieurs √©preuves
 * - **Int√©gration seamless** : Composant s'int√®gre naturellement dans cellule
 *
 * ### üìÖ Date et horaire avec formatage fran√ßais
 * - **Date format√©e** : `new Date(event.date).toLocaleDateString('fr-FR')`
 * - **Format fran√ßais** : Affichage DD/MM/YYYY selon standards locaux
 * - **Horaire compl√©mentaire** : `event.horraire` affich√© en sous-texte
 * - **Hi√©rarchie visuelle** : Date principale + horaire secondaire
 * - **Style diff√©renci√©** : text-sm pour date, text-xs text-gray-500 pour heure
 * - **Stacking vertical** : Informations temporelles empil√©es dans cellule
 *
 * ### üèüÔ∏è Lieu √©v√©nement avec nom √©tablissement
 * - **Nom lieu** : `event.lieu.nom` pour identification √©tablissement
 * - **Relation lieu** : Objet lieu imbriqu√© avec propri√©t√©s compl√®tes
 * - **Style standard** : text-sm text-gray-900 pour coh√©rence
 * - **Donn√©es relationnelles** : R√©f√©rence lieu depuis base √©tablissements JO
 * - **Exemples** : "Stade de France", "Centre Aquatique", "Arena Bercy"
 * - **Int√©gration** : Lien avec syst√®me de gestion des lieux olympiques
 *
 * ### ‚è∞ Statut temps r√©el via EventStatus (sous-composant calcul√©)
 * - **Composant dynamique** : EventStatus calcule statut selon date/heure actuelle
 * - **Props transmises** : date={event.date} time={event.horraire}
 * - **Calcul temps r√©el** : Statut mis √† jour selon horloge syst√®me
 * - **√âtats possibles** : √Ä venir, En cours, Termin√© avec couleurs distinctes
 * - **Logique d√©l√©gu√©e** : Calculs temporels dans sous-composant sp√©cialis√©
 * - **Affichage dynamique** : Badge color√© indiquant √©tat √©v√©nement
 *
 * ## Actions utilisateur CRUD int√©gr√©es
 *
 * ### ‚úèÔ∏è Action de modification √©v√©nement
 * - **Bouton "Modifier"** : D√©clenche √©dition √©v√©nement complet
 * - **Callback** : `onEdit(event)` avec objet √©v√©nement complet
 * - **Style** : text-blue-600 hover:text-blue-900 pour feedback visuel
 * - **Position** : Premi√®re action dans colonne Actions
 * - **Espacement** : mr-3 pour s√©paration avec bouton suppression
 * - **Interaction** : Hover effect avec assombrissement couleur
 * - **Donn√©es compl√®tes** : Transmission objet avec relations (√©preuves, lieu)
 *
 * ### üóëÔ∏è Action de suppression √©v√©nement
 * - **Bouton "Supprimer"** : D√©clenche suppression √©v√©nement
 * - **Callback** : `onDelete(event.id)` avec ID num√©rique √©v√©nement
 * - **Style** : text-red-600 hover:text-red-900 couleur danger
 * - **Position** : Seconde action dans colonne Actions
 * - **Feedback visuel** : Rouge pour action destructive standard
 * - **Confirmation** : Gestion confirmations dans composants parents
 * - **S√©curit√©** : Transmission ID uniquement pour limitation exposition
 *
 * ## Structure et layout ligne tableau complexe
 *
 * ### üé® Design ligne interactive avec sous-composants
 * - **√âl√©ment HTML** : `<tr>` s√©mantique pour structure tableau
 * - **Hover effect** : hover:bg-gray-50 pour feedback survol ligne
 * - **Colonnes** : 6 colonnes (Description, √âpreuves, Date/Heure, Lieu, Statut, Actions)
 * - **Cellules mixtes** : Certaines avec sous-composants, autres avec donn√©es simples
 * - **Padding variable** : px-6 py-4 standard, adaptations selon contenu
 * - **Whitespace** : whitespace-nowrap sur donn√©es simples, flexibilit√© √©preuves
 *
 * ### üì± Responsive et accessibilit√© complexe
 * - **Layout adaptatif** : Colonnes s'adaptent largeur container
 * - **Overflow intelligent** : Gestion d√©bordement via container parent
 * - **Sous-composants responsives** : EvenementEpreuve et EventStatus adapt√©s
 * - **Touch-friendly** : Boutons dimensionn√©s interaction tactile
 * - **Contraste** : Couleurs respectant standards WCAG AA
 * - **Navigation** : Ordre tabulation logique avec sous-composants
 *
 * ## Int√©gration sous-composants sp√©cialis√©s
 *
 * ### üèÖ EvenementEpreuve - Affichage √©preuves multiples
 * - **Props** : epreuves={event.epreuves} array √©preuves associ√©es
 * - **Responsabilit√©** : Gestion affichage plusieurs √©preuves par √©v√©nement
 * - **Rendu d√©l√©gu√©** : Logique affichage complexe dans composant sp√©cialis√©
 * - **Relations** : Gestion relations √©v√©nement ‚Üî √©preuves multiples
 * - **Flexibilit√©** : Adaptation nombre variable √©preuves par √©v√©nement
 * - **Performance** : Optimisation rendu listes √©preuves
 *
 * ### ‚è∞ EventStatus - Calcul statut temps r√©el
 * - **Props** : date={event.date} time={event.horraire} pour calculs
 * - **Logique temporelle** : Comparaison date/heure avec horloge syst√®me
 * - **√âtats dynamiques** : "√Ä venir", "En cours", "Termin√©" selon timing
 * - **Couleurs contextuelles** : Badges color√©s selon statut calcul√©
 * - **Mise √† jour** : Recalcul automatique selon changements temporels
 * - **Performance** : Calculs optimis√©s pour √©viter re-renders excessifs
 *
 * ## Gestion des relations donn√©es complexes
 *
 * ### üîó Relations √©v√©nement multiples
 * - **√âpreuves multiples** : `event.epreuves` array avec relations 1-N
 * - **Lieu unique** : `event.lieu` objet avec relation 1-1
 * - **Donn√©es imbriqu√©es** : Propri√©t√©s nested accessibles directement
 * - **Coh√©rence relationnelle** : Structure donn√©es garantie par types TS
 * - **Performance** : Pas de jointures c√¥t√© client, donn√©es pr√©-jointes
 * - **Int√©grit√©** : Validation relations via interfaces TypeScript
 *
 * ### üìä Types de donn√©es √©v√©nement g√©r√©es
 * - **Description** : string - Titre descriptif √©v√©nement sportif
 * - **Date** : string/Date - Date √©v√©nement pour calculs et affichage
 * - **Horaire** : string - Heure √©v√©nement compl√©mentaire date
 * - **ID** : number - Identifiant unique √©v√©nement
 * - **√âpreuves** : array - Liste √©preuves associ√©es √† l'√©v√©nement
 * - **Lieu** : objet - R√©f√©rence lieu avec nom et propri√©t√©s
 *
 * ## Performance et optimisations relations
 *
 * ### ‚ö° Optimisations actuelles
 * - **Composant pur** : Pas d'√©tat local pour performance
 * - **Props stables** : D√©pendances minimales re-rendering
 * - **Sous-composants d√©l√©gu√©s** : Logiques complexes externalis√©es
 * - **CSS statique** : Classes Tailwind pr√©-compil√©es
 * - **Callbacks externes** : Gestion state dans composants parents
 * - **Relations pr√©-jointes** : Pas de queries additionnelles
 *
 * ### üîÑ Gestion re-renders avec sous-composants
 * - **M√©morisation candidat** : React.memo possible si parents instables
 * - **Props drilling minimal** : Transmission cibl√©e vers sous-composants
 * - **Immutabilit√©** : Props objects stables entre renders
 * - **Keys stables** : event.id pour optimisation React keys
 * - **Sous-composants optimis√©s** : EvenementEpreuve et EventStatus performants
 *
 * ## Sp√©cificit√©s m√©tier √©v√©nements olympiques
 *
 * ### üèÖ Contexte m√©tier √©v√©nements JO 2024
 * - **Terminologie** : "√âv√©nement" pour sessions comp√©titives programm√©es
 * - **Planning olympique** : Gestion calendrier comp√©titions JO Paris 2024
 * - **Relations multiples** : √âv√©nements ‚Üí √âpreuves (1-N), √âv√©nements ‚Üí Lieux (1-1)
 * - **Statuts temporels** : Suivi temps r√©el d√©roulement comp√©titions
 * - **Gestion organisateurs** : Interface back-office √©quipes √©v√©nements JO
 * - **Standards CIO** : Respect nomenclature et timing olympiques
 *
 * ### üïê Gestion temporelle et statuts
 * - **Planification** : Date + horaire pour scheduling pr√©cis
 * - **Statuts calcul√©s** : √Ä venir/En cours/Termin√© selon timing r√©el
 * - **Format fran√ßais** : DD/MM/YYYY pour coh√©rence locale
 * - **Horaires d√©taill√©s** : Compl√©mentaire date pour precision
 * - **Suivi temps r√©el** : Mise √† jour statuts selon progression
 * - **Coordination** : Synchronisation avec diffusion et retransmissions
 *
 * ## S√©curit√© et validation relations
 *
 * ### üîí Aspects s√©curitaires
 * - **Validation props** : Interface TypeScript stricte
 * - **Sanitisation** : Affichage s√©curis√© donn√©es textuelles
 * - **ID transmission** : Seul ID transmis pour suppression
 * - **Relations valid√©es** : Structure √©preuves et lieu garantie
 * - **XSS prevention** : React √©chappe automatiquement contenu
 * - **Type safety** : Interfaces Evenement et Props strictes
 *
 * ### ‚úÖ Validation des donn√©es affich√©es
 * - **Description √©v√©nement** : Affichage string avec √©chappement auto
 * - **Date parsing** : new Date() avec validation format
 * - **Relations nested** : Propri√©t√©s imbriqu√©es s√©curis√©es
 * - **Sous-composants** : Validation props transmises
 * - **Callbacks** : Validation types param√®tres actions
 *
 * ## Am√©liorations et extensions possibles
 *
 * ### üöÄ Am√©liorations fonctionnelles
 * - **Actions √©tendues** : Duplication, archivage √©v√©nement
 * - **Liens directs** : Navigation vers d√©tail √©preuves/lieu
 * - **Statut avanc√©** : Indicateurs compl√©mentaires (m√©t√©o, affluence)
 * - **Actions group√©es** : S√©lection multiple √©v√©nements
 * - **Export** : G√©n√©ration PDF/iCal pour √©v√©nement
 * - **Notifications** : Alertes changements planning
 *
 * ### üé® Am√©liorations visuelles
 * - **Animations** : Transitions smooth sur hover states
 * - **Loading states** : Squelettes pendant chargements relations
 * - **Badges enrichis** : Indicateurs visuels type √©v√©nement
 * - **Ic√¥nes contextuelles** : Symboles sport/lieu pour identification
 * - **Density modes** : Options affichage compact/standard/d√©taill√©
 * - **Timeline view** : Repr√©sentation chronologique √©v√©nements
 * - **Color coding** : Couleurs th√©matiques par sport/lieu
 *
 * ### üîß Optimisations techniques
 * - **Virtual scrolling** : Rendu virtuel grandes listes √©v√©nements
 * - **Memoization** : React.memo pour sous-composants
 * - **Code splitting** : Chargement diff√©r√© sous-composants
 * - **Prefetching** : Pr√©-chargement donn√©es relations
 * - **Caching intelligent** : Cache local √©v√©nements fr√©quents
 * - **Real-time updates** : WebSocket pour statuts temps r√©el
 *
 * @param {Props} props - Propri√©t√©s du composant
 * @param {Evenement} props.event - Objet √©v√©nement avec relations (√©preuves, lieu) √† afficher
 * @param {function} props.onDelete - Callback suppression avec ID √©v√©nement
 * @param {function} props.onEdit - Callback √©dition avec objet √©v√©nement complet
 *
 * @returns {JSX.Element} Ligne de tableau interactive avec donn√©es √©v√©nement et sous-composants
 *
 * @see {@link EvenementsTable} - Tableau parent contenant les lignes
 * @see {@link EvenementEpreuve} - Sous-composant affichage √©preuves multiples
 * @see {@link EventStatus} - Sous-composant calcul statut temps r√©el
 * @see {@link Evenement} - Interface TypeScript de l'objet √©v√©nement
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Utilisation dans EvenementsTable
 * {evenements.map((event) => (
 *   <EvenementsTableRow
 *     key={event.id}
 *     event={event}
 *     onDelete={handleDelete}
 *     onEdit={handleEdit}
 *   />
 * ))}
 * ```
 *
 * @example
 * ```tsx
 * // Structure objet √©v√©nement attendu
 * const event: Evenement = {
 *   id: 1,
 *   description: "Finale natation 100m hommes",
 *   date: "2024-07-30",
 *   horraire: "20:30",
 *   epreuves: [
 *     { id: 1, libelle: "100m nage libre hommes", discipline: {...} }
 *   ],
 *   lieu: {
 *     nom: "Centre Aquatique"
 *   }
 * };
 * ```
 */
export default function EvenementsTableRow({ event, onDelete, onEdit }: Props) {
  return (
    <tr className="hover:bg-gray-50">
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm font-medium text-gray-900">{event.description}</div>
      </td>
      <td className="px-6 py-4">
        <EvenementEpreuve epreuves={event.epreuves} />
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm text-gray-900">
          {new Date(event.date).toLocaleDateString('fr-FR')}
        </div>
        <div className="text-xs text-gray-500">{event.horraire}</div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm text-gray-900">{event.lieu.nom}</div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <EventStatus date={event.date} time={event.horraire} />
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <button 
          onClick={() => onEdit(event)}
          className="text-blue-600 hover:text-blue-900 mr-3"
        >
          Modifier
        </button>
        <button 
          onClick={() => onDelete(event.id)}
          className="text-red-600 hover:text-red-900"
        >
          Supprimer
        </button>
      </td>
    </tr>
  );
}
