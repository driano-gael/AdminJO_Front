import { Evenement} from '@/types/sportEvenement/evenement';
import EventStatus from './EvenementsStatus';
import EvenementEpreuve from './EvenementEpreuves';
import {JSX} from "react";

interface Props {
  event: Evenement;
  onDelete: (id: number) => void;
  onEdit: (event: Evenement) => void;
}

/**
 * Composant EvenementsTableRow - Ligne de tableau pour √©v√©nement sportif olympique AdminJO
 *
 * Ce composant repr√©sente une ligne individuelle dans le tableau des √©v√©nements sportifs
 * olympiques. Il affiche les informations compl√®tes d'un √©v√©nement (description, √©preuves,
 * date/heure, lieu, statut) avec sous-composants sp√©cialis√©s int√©gr√©s et fournit les actions
 * CRUD directes via boutons. Con√ßu pour l'interface d'administration des Jeux Olympiques 2024,
 * il orchestre l'affichage de donn√©es complexes avec relations multiples (√©preuves, lieux)
 * et calcul de statut temps r√©el selon planning.
 *
 * ## Donn√©es affich√©es et sous-composants int√©gr√©s
 *
 * ### Description √©v√©nement principale
 * - **Description compl√®te** : `event.description` avec typographie medium accentu√©e
 * - **Contenu riche** : Titre descriptif √©v√©nement sportif (ex: "Finale natation 100m")
 *
 * ### √âpreuves associ√©es via EvenementEpreuve (sous-composant int√©gr√©)
 * - **Composant sp√©cialis√©** : EvenementEpreuve pour affichage √©preuves complexes
 * - **Donn√©es relationnelles** : `event.epreuves` array transmis int√©gralement
 * - **Gestion multiple** : Support affichage plusieurs √©preuves par √©v√©nement
 * - **D√©l√©gation affichage** : Logique rendu d√©l√©gu√©e au sous-composant
 * - **Relations normalis√©es** : Chaque √©v√©nement peut avoir plusieurs √©preuves
 *
 * ### Date et horaire avec formatage fran√ßais
 * - **Date format√©e** : `new Date(event.date).toLocaleDateString('fr-FR')`
 * - **Format fran√ßais** : Affichage DD/MM/YYYY selon standards locaux
 * - **Horaire compl√©mentaire** : `event.horraire` affich√© en sous-texte
 * - **Hi√©rarchie visuelle** : Date principale + horaire secondaire
 *
 * ### Lieu √©v√©nement avec nom √©tablissement
 * - **Nom lieu** : `event.lieu.nom` pour identification √©tablissement
 * - **Relation lieu** : Objet lieu imbriqu√© avec propri√©t√©s compl√®tes
 *
 * ### Statut temps r√©el via EventStatus (sous-composant calcul√©)
 * - **Composant dynamique** : EventStatus calcule statut selon date/heure actuelle
 * - **Props transmises** : date={event.date} time={event.horraire}
 * - **Calcul temps r√©el** : Statut mis √† jour selon horloge syst√®me
 * - **√âtats possibles** : √Ä venir, En cours, Termin√© avec couleurs distinctes
 *
 * ## Actions utilisateur CRUD int√©gr√©es
 *
 * ### ‚úèAction de modification √©v√©nement
 * - **Bouton "Modifier"** : D√©clenche √©dition √©v√©nement complet
 * - **Callback** : `onEdit(event)` avec objet √©v√©nement complet
 * - **Donn√©es compl√®tes** : Transmission objet avec relations (√©preuves, lieu)
 *
 * ### üóëAction de suppression √©v√©nement
 * - **Bouton "Supprimer"** : D√©clenche suppression √©v√©nement
 * - **Callback** : `onDelete(event.id)` avec ID num√©rique √©v√©nement
 *
 *
 * @param {Props} props - Propri√©t√©s du composant
 * @param {Evenement} props.event - Objet √©v√©nement avec relations (√©preuves, lieu) √† afficher
 * @param {function} props.onDelete - Callback suppression avec ID √©v√©nement
 * @param {function} props.onEdit - Callback √©dition avec objet √©v√©nement complet
 *
 * @returns {JSX.Element} Ligne de tableau interactive avec donn√©es √©v√©nement et sous-composants
 *
 * @see {@link EvenementsTable} - Tableau parent contenant les lignes
 * @see {@link EvenementEpreuve} - Sous-composant affichage √©preuves multiples
 * @see {@link EventStatus} - Sous-composant calcul statut temps r√©el
 * @see {@link Evenement} - Interface TypeScript de l'objet √©v√©nement
 *
 */
export function EvenementsTableRow({ event, onDelete, onEdit }: Props): JSX.Element {
  return (
    <tr className="hover:bg-gray-50">
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm font-medium text-gray-900">{event.description}</div>
      </td>
      <td className="px-6 py-4">
        <EvenementEpreuve epreuves={event.epreuves} />
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm text-gray-900">
          {new Date(event.date).toLocaleDateString('fr-FR')}
        </div>
        <div className="text-xs text-gray-500">{event.horraire}</div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <div className="text-sm text-gray-900">{event.lieu.nom}</div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <EventStatus date={event.date} time={event.horraire} />
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
        <button 
          onClick={() => onEdit(event)}
          className="text-blue-600 hover:text-blue-900 mr-3"
        >
          Modifier
        </button>
        <button 
          onClick={() => onDelete(event.id)}
          className="text-red-600 hover:text-red-900"
        >
          Supprimer
        </button>
      </td>
    </tr>
  );
}
export default EvenementsTableRow;
