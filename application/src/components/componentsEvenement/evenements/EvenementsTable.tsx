'use client';

/**
 * Composant EvenementsTable - Tableau principal d'affichage des √©v√©nements sportifs olympiques AdminJO
 *
 * Ce composant constitue l'interface centrale de visualisation des √©v√©nements sportifs olympiques
 * des Jeux Olympiques 2024. Il orchestre l'affichage sous forme de tableau structur√© avec colonnes
 * sp√©cialis√©es complexes (√©preuves multiples, statuts temps r√©el), gestion compl√®te des √©tats
 * (chargement, erreurs, vide), syst√®me de rafra√Æchissement intelligent, et int√©gration des actions
 * CRUD via lignes interactives avec sous-composants. Con√ßu pour l'administration JO, il suit les
 * standards AdminJO avec responsive design, feedback utilisateur riche, et gestion relations multiples.
 *
 * ## Structure et affichage tableau complexe r√©ellement impl√©ment√©s
 *
 * ### üìä Architecture tableau sp√©cialis√©e √©v√©nements olympiques
 * - **Container principal** : Card avec bg-white rounded-lg shadow-md pour √©l√©vation
 * - **Header tableau** : Section avec titre + compteur + actions refresh + loading
 * - **Corps tableau** : Structure HTML s√©mantique avec thead/tbody complexe
 * - **Colonnes sp√©cialis√©es** : √âv√©nement, √âpreuves (sous-composant), Date, Lieu, Statut (temps r√©el), Actions
 * - **Overflow management** : overflow-x-auto pour d√©bordement horizontal responsive
 * - **Responsive design** : min-w-full avec adaptation automatique contenus complexes
 * - **Elevation** : Ombre port√©e pour d√©tachement visuel du fond
 *
 * ### üè∑Ô∏è En-t√™te tableau avec m√©tadonn√©es dynamiques √©v√©nements
 * - **Titre contextuel** : "√âv√©nements" avec compteur dynamique `(${events.length})`
 * - **Indicateur de chargement** : Spinner + "Chargement..." pendant loading
 * - **Bouton actualisation** : "üîÑ Actualiser" avec callback onRefresh
 * - **√âtat bouton** : D√©sactivation automatique pendant chargement
 * - **Layout horizontal** : justify-between pour r√©partition √©quilibr√©e
 * - **Feedback visuel** : Spinner pour indication non-intrusive
 * - **S√©parateur** : border-b border-gray-200 pour d√©limitation claire
 *
 * ### üìã Colonnes tableau optimis√©es m√©tier √©v√©nements complexes
 * - **Colonne 1 - √âv√©nement** : Description compl√®te √©v√©nement sportif
 * - **Colonne 2 - √âpreuves** : Sous-composant EvenementEpreuve pour √©preuves multiples
 * - **Colonne 3 - Date** : Date format√©e fran√ßaise + horaire pr√©cis
 * - **Colonne 4 - Lieu** : Nom √©tablissement olympique (Stade de France, etc.)
 * - **Colonne 5 - Statut** : Sous-composant EventStatus temps r√©el (√Ä venir/En cours/Termin√©)
 * - **Colonne 6 - Actions** : Boutons Modifier/Supprimer avec callbacks
 * - **Headers style** : bg-gray-50 avec typographie uppercase tracking-wider
 * - **Complexit√©** : Mix donn√©es simples + sous-composants sp√©cialis√©s
 *
 * ## Gestion des √©tats d'interface avanc√©e √©v√©nements
 *
 * ### ‚è≥ √âtats de chargement multicouches √©v√©nements
 * - **Loading global** : Spinner dans header + d√©sactivation refresh
 * - **Loading initial** : Message "Chargement des √©v√©nements..." avec spinner
 * - **√âtat vide + loading** : Centrage avec flex items-center justify-center
 * - **Feedback temps r√©el** : Indication "Chargement..." textuelle explicite
 * - **D√©sactivation actions** : disabled={loading} sur bouton refresh
 * - **Coh√©rence visuelle** : Spinners coordonn√©s avec sous-composants
 * - **Non-intrusion** : Loading header n'affecte pas structure tableau
 *
 * ### üö® Gestion d'erreurs contextuelles √©v√©nements
 * - **Affichage erreur** : Bandeau rouge d√©di√© entre header et tableau
 * - **Style erreur** : px-6 py-4 bg-red-50 border-b border-red-200
 * - **Position strat√©gique** : Sous header, au-dessus tableau pour visibilit√©
 * - **Conditional rendering** : `{error && ...}` pour affichage conditionnel
 * - **Message d'erreur** : text-sm text-red-600 pour lisibilit√©
 * - **Accessibilit√©** : Couleurs contrast√©es pour lisibilit√© erreurs
 * - **Persistance** : Erreur reste affich√©e jusqu'√† nouvel appel API
 *
 * ### üóÇÔ∏è √âtats vide avec messages contextuels intelligents √©v√©nements
 * - **Vide + recherche** : "Aucun √©v√©nement trouv√©" + terme recherche affich√©
 * - **Vide initial** : "Aucun √©v√©nement" + "Commencez par cr√©er votre premier √©v√©nement"
 * - **Vide + loading** : "Chargement des √©v√©nements..." avec spinner
 * - **Colspan adapt√©** : colSpan={7} pour occuper toutes 6 colonnes (erreur colspan)
 * - **Centrage vertical** : py-12 pour espacement g√©n√©reux √©tat vide
 * - **Hi√©rarchie messages** : text-lg font-medium + text-sm pour d√©tails
 * - **Guillemets recherche** : &ldquo;{searchTerm}&rdquo; pour mise en √©vidence
 *
 * ## Int√©gration lignes et actions CRUD √©v√©nements
 *
 * ### üîÑ Rendu dynamique des lignes √©v√©nements complexes
 * - **Mapping optimis√©** : `events.map((event) => ...)` avec key stable
 * - **Composant ligne** : EvenementsTableRow pour chaque √©v√©nement
 * - **Props transmission** : event, onDeleteEvent, onEdit vers lignes
 * - **Key unique** : event.id pour optimisation React reconciliation
 * - **Callbacks bubbling** : Remont√©e actions ligne vers composant parent
 * - **Donn√©es compl√®tes** : Objet √©v√©nement + relations (√©preuves, lieu) transmis
 * - **Performance** : Re-render optimis√© avec keys stables
 *
 * ### üîß Actions tableau et callbacks √©v√©nements
 * - **Refresh intelligent** : onRefresh() pr√©serve contexte recherche/filtres
 * - **Suppression √©v√©nement** : onDeleteEvent(id) avec ID num√©rique pour s√©curit√©
 * - **√âdition √©v√©nement** : onEdit(event) avec objet ExtendEvenement complet
 * - **D√©l√©gation logique** : Actions g√©r√©es par composants parents
 * - **√âtat pr√©serv√©** : Callbacks n'affectent pas √©tat local tableau
 * - **Feedback externe** : Notifications g√©r√©es par EvenementsManagement
 * - **Synchronisation** : Mise √† jour automatique via props events
 *
 * ## Types de donn√©es √©v√©nements √©tendus
 *
 * ### üìä ExtendEvenement vs Evenement standard
 * - **Type √©tendu** : ExtendEvenement avec propri√©t√©s enrichies
 * - **Relations pr√©charg√©es** : √âpreuves et lieu inclus dans objet
 * - **Performance** : √âvite jointures c√¥t√© client multiples
 * - **Complexit√©** : Support donn√©es nested complexes (√©preuves[])
 * - **Type safety** : Interface TypeScript stricte pour s√©curit√©
 * - **√âvolutivit√©** : Support ajout propri√©t√©s futures √©v√©nements
 *
 * ### üîó Relations √©v√©nements g√©r√©es
 * - **√âpreuves multiples** : Array √©preuves avec disciplines associ√©es
 * - **Lieu unique** : Objet lieu avec nom et propri√©t√©s
 * - **Statut temporel** : Calcul√© dynamiquement via sous-composant
 * - **M√©tadonn√©es** : Description, date, horaire complets
 * - **Hi√©rarchie** : √âv√©nements niveau racine avec enfants
 * - **Int√©grit√©** : Relations valid√©es via interfaces TypeScript
 *
 * ## Responsive design et accessibilit√© complexe
 *
 * ### üì± Adaptation multi-supports √©v√©nements
 * - **Scroll horizontal** : overflow-x-auto pour d√©bordement mobile
 * - **Largeur minimale** : min-w-full pour coh√©rence desktop
 * - **Container fluide** : Adaptation automatique largeur parent
 * - **Sous-composants responsive** : EvenementEpreuve et EventStatus adapt√©s
 * - **Touch-friendly** : Zones d'action dimensionn√©es tactile
 * - **Breakpoints** : Gestion responsive via classes Tailwind
 * - **Dense mobile** : Maintien lisibilit√© donn√©es complexes petits √©crans
 *
 * ### ‚ôø Standards accessibilit√© tableau complexe
 * - **S√©mantique HTML** : Structure table/thead/tbody/th/td correcte
 * - **Headers explicites** : Colonnes titr√©es pour lecteurs √©cran
 * - **Contraste couleurs** : Respect ratios WCAG AA sur tous √©l√©ments
 * - **Focus management** : Navigation clavier coh√©rente avec sous-composants
 * - **Screen readers** : Structure logique pour synth√®se vocale
 * - **ARIA implicit** : S√©mantique table native + sous-composants
 * - **Alt text** : Messages d'√©tat lisibles par assistive technologies
 *
 * ## Int√©grations et d√©pendances √©v√©nements
 *
 * ### üîå Composants int√©gr√©s sp√©cialis√©s √©v√©nements
 * - **EvenementsTableRow** : Composant ligne individuelle avec sous-composants
 * - **EvenementEpreuve** : Affichage √©preuves multiples en badges
 * - **EventStatus** : Calcul et affichage statut temps r√©el
 * - **Spinner** : Composant loading r√©utilisable
 * - **ExtendEvenement type** : Interface TypeScript validation donn√©es
 * - **Props interface** : Contrat strict avec composant parent
 *
 * ### üì° Communication parent-enfant optimis√©e √©v√©nements
 * - **Props descendantes** : events, loading, error, searchTerm depuis parent
 * - **Callbacks ascendantes** : onRefresh, onDeleteEvent, onEdit vers parent
 * - **Transmission cibl√©e** : Props sp√©cifiques transmises aux lignes
 * - **√âtat centralis√©** : Gestion state dans EvenementsManagement parent
 * - **R√©activit√©** : Re-render automatique sur changement props
 * - **Performance** : Minimal props drilling avec callbacks stables
 *
 * ## Performance et optimisations √©v√©nements
 *
 * ### ‚ö° Optimisations de rendu actuelles
 * - **Composant client** : 'use client' pour interactivit√© compl√®te
 * - **Keys optimis√©es** : event.id pour reconciliation React efficace
 * - **Conditional rendering** : Affichage conditionnel erreurs/loading/vide
 * - **CSS statique** : Classes Tailwind pr√©-compil√©es
 * - **Callbacks stables** : Props functions stables entre re-renders
 * - **Sous-composants d√©l√©gu√©s** : Logiques complexes externalis√©es
 *
 * ### üéØ Candidats optimisation avanc√©e √©v√©nements
 * - **React.memo** : M√©morisation composant si re-renders fr√©quents
 * - **Virtualisation** : Rendu virtuel pour grandes listes √©v√©nements
 * - **Pagination** : D√©coupage donn√©es si volume important
 * - **Lazy loading** : Chargement progressif relations (√©preuves, lieux)
 * - **Debouncing** : Optimisation refresh si appels fr√©quents
 * - **Memoized sous-composants** : Optimisation EvenementEpreuve et EventStatus
 *
 * ## Sp√©cificit√©s m√©tier √©v√©nements olympiques
 *
 * ### üèÖ Contexte Olympic Games administration √©v√©nements
 * - **Terminologie** : "√âv√©nements" pour sessions comp√©titives programm√©es
 * - **Relations complexes** : √âv√©nements ‚Üí √âpreuves (1-N), √âv√©nements ‚Üí Lieux (1-1)
 * - **Exemples donn√©es** : "Finale natation", "Qualifications athl√©tisme"
 * - **Hi√©rarchie** : √âv√©nements niveau racine planning olympique
 * - **Gestion** : Interface organisateurs JO pour planning comp√©titions
 * - **Standards** : Respect nomenclature CIO et timing olympiques
 *
 * ### üìÖ Gestion temporelle et statuts √©v√©nements
 * - **Planning pr√©cis** : Date + horaire pour scheduling exact
 * - **Statuts temps r√©el** : √Ä venir/En cours/Termin√© via EventStatus
 * - **Coordination** : Synchronisation √©quipes, m√©dias, spectateurs
 * - **Relations temporelles** : Lien √©preuves ‚Üí √©v√©nement ‚Üí planning global
 * - **Flexibilit√©** : Support modifications planning derni√®re minute
 * - **Suivi** : Monitoring progression √©v√©nements en temps r√©el
 *
 * ## Gestion d'erreurs et edge cases √©v√©nements
 *
 * ### üõ°Ô∏è Robustesse et cas limites
 * - **Props null/undefined** : Gestion defensive avec valeurs d√©faut
 * - **Array vide** : √âtat vide avec message appropri√©
 * - **Error optionnel** : Props error?: string | null pour flexibilit√©
 * - **SearchTerm vide** : Message √©tat vide adapt√© selon contexte
 * - **Loading concurrent** : Gestion coh√©rente √©tats multiples
 * - **Network failures** : Affichage erreurs r√©seau dans bandeau d√©di√©
 *
 * ### üîÑ Recovery et √©tats de r√©cup√©ration
 * - **Retry mechanism** : Bouton refresh pour nouvelle tentative
 * - **Error clearing** : Effacement erreur sur nouveau chargement
 * - **State consistency** : Coh√©rence √©tat loading/error/data
 * - **Graceful degradation** : Fonctionnement partiel si erreurs relations
 * - **User feedback** : Messages clairs pour guider utilisateur
 * - **Fallback content** : Contenu alternatif si √©chec chargement
 *
 * @param {Props} props - Propri√©t√©s du composant tableau √©v√©nements
 * @param {ExtendEvenement[]} props.events - Array des √©v√©nements √©tendus √† afficher
 * @param {boolean} props.loading - √âtat de chargement pour feedback UI
 * @param {string} props.searchTerm - Terme de recherche pour messages contextuels
 * @param {function} props.onDeleteEvent - Callback suppression √©v√©nement par ID
 * @param {function} props.onEdit - Callback √©dition √©v√©nement avec objet complet
 * @param {function} props.onRefresh - Callback actualisation donn√©es
 * @param {string|null} [props.error] - Message d'erreur optionnel √† afficher
 *
 * @returns {JSX.Element} Tableau complet avec gestion √©tats et actions CRUD √©v√©nements
 *
 * @see {@link EvenementsTableRow} - Composant ligne individuelle avec sous-composants
 * @see {@link EvenementEpreuve} - Sous-composant affichage √©preuves multiples
 * @see {@link EventStatus} - Sous-composant statut temps r√©el
 * @see {@link ExtendEvenement} - Interface TypeScript objet √©v√©nement √©tendu
 * @see {@link EvenementsManagement} - Composant parent orchestrateur
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Utilisation dans EvenementsManagement
 * <EvenementsTable
 *   events={events}
 *   loading={loading}
 *   searchTerm={searchTerm}
 *   onDeleteEvent={handleDeleteEvent}
 *   onEdit={handleEditEvent}
 *   onRefresh={handleRefresh}
 *   error={error}
 * />
 * ```
 */

import { ExtendEvenement } from '@/types/sportEvenement/evenement';
import EvenementsTableRow from './EvenementsTableRow';
import Spinner from '@/components/spinner';

interface Props {
  events: ExtendEvenement[];
  loading: boolean;
  searchTerm: string;
  onDeleteEvent: (id: number) => void;
  onEdit: (event: ExtendEvenement) => void;
  onRefresh: () => void;
  error?: string | null;
}

export default function EvenementsTable({ 
    events, 
    loading, 
    searchTerm, 
    onDeleteEvent,
    onEdit, 
    onRefresh,
    error
}: Props) {
  return (
    <div className="bg-white rounded-lg shadow-md overflow-hidden">
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex justify-between items-center">
          <h2 className="text-xl font-semibold text-gray-900">
            √âv√©nements ({events.length})
          </h2>
          <div className="flex items-center space-x-2">
            {loading && (
              <div className="flex items-center text-sm text-gray-500">
                <Spinner />
                Chargement...
              </div>
            )}
            <button
              onClick={onRefresh}
              className="text-blue-600 hover:text-blue-800 text-sm font-medium"
              disabled={loading}
            >
              üîÑ Actualiser
            </button>
          </div>
        </div>
      </div>
      
      {/* Affichage des erreurs */}
      {error && (
        <div className="px-6 py-4 bg-red-50 border-b border-red-200">
          <div className="text-sm text-red-600">
            {error}
          </div>
        </div>
      )}
      
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                √âv√©nement
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                √âpreuves
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Date
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Lieu
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Statut
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {events.length === 0 ? (
              <tr>
                <td colSpan={7} className="px-6 py-12 text-center text-gray-500">
                  {loading ? (
                    <div className="flex items-center justify-center">
                      <Spinner />
                      Chargement des √©v√©nements...
                    </div>
                  ) : searchTerm ? (
                    <div>
                      <p className="text-lg font-medium">Aucun √©v√©nement trouv√©</p>
                      <p className="text-sm">Aucun √©v√©nement ne correspond √† votre recherche &ldquo;{searchTerm}&rdquo;</p>
                    </div>
                  ) : (
                    <div>
                      <p className="text-lg font-medium">Aucun √©v√©nement</p>
                      <p className="text-sm">Commencez par cr√©er votre premier √©v√©nement</p>
                    </div>
                  )}
                </td>
              </tr>
            ) : (
              events.map((event) => (
                <EvenementsTableRow
                  key={event.id}
                  event={event}
                  onDelete={onDeleteEvent}
                  onEdit={onEdit}
                />
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
}
