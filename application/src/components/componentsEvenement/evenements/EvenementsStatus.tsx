import { getEventStatus, getStatusColor } from "@/utils/evenement/statutEvenement";

interface EventStatusProps {
  date: string;
  time: string;
}

/**
 * Composant EventStatus - Badge de statut temps r√©el pour √©v√©nements sportifs olympiques AdminJO
 *
 * Ce composant sous-composant sp√©cialis√© calcule et affiche le statut temps r√©el d'un √©v√©nement
 * sportif olympique bas√© sur sa date/heure programm√©e versus l'horloge syst√®me actuelle. Il utilise
 * des fonctions utilitaires d√©di√©es pour d√©terminer l'√©tat (√Ä venir/En cours/Termin√©) et applique
 * automatiquement les couleurs contextuelles appropri√©es. Int√©gr√© dans EvenementsTableRow, il fournit
 * un feedback visuel imm√©diat sur l'√©tat de progression des comp√©titions olympiques.
 *
 * ## Fonctionnalit√©s de calcul statut temps r√©el
 *
 * ### ‚è∞ Calcul statut dynamique via utilitaires
 * - **Fonction utilitaire** : `getEventStatus(date, time)` pour logique temporelle
 * - **Param√®tres temporels** : Date string + Time string pour calcul pr√©cis
 * - **Comparaison syst√®me** : Horloge syst√®me vs date/heure √©v√©nement programm√©
 * - **√âtats calcul√©s** : "√Ä venir", "En cours", "Termin√©" selon timing relatif
 * - **Logique externalis√©e** : Calculs complexes dans utils/evenement/statutEvenement
 * - **R√©utilisabilit√©** : Logique partageable autres composants syst√®me
 *
 * ### üé® Affichage badge color√© contextuel
 * - **Badge syst√®me** : span avec classes Tailwind pour badge styled
 * - **Couleurs dynamiques** : `getStatusColor(status)` pour classes CSS appropri√©es
 * - **Style badge** : inline-flex px-2 py-1 text-xs font-semibold rounded-full
 * - **Taille optimis√©e** : text-xs pour int√©gration harmonieuse cellule tableau
 * - **Forme distinctive** : rounded-full pour identification badge statut
 * - **Contenu textuel** : Affichage direct string status calcul√©
 *
 * ### üîÑ Mise √† jour automatique temps r√©el
 * - **Recalcul automatique** : Re-render composant ‚Üí nouveau calcul statut
 * - **R√©activit√© temporelle** : Statut change automatiquement selon passage temps
 * - **Pas de timer interne** : D√©pend re-renders parent pour mise √† jour
 * - **Performance optimis√©e** : Calculs l√©gers via fonctions utilitaires
 * - **Coh√©rence visuelle** : Couleurs mises √† jour synchronis√©es avec statut
 * - **√âtats transitoires** : Gestion passage "√Ä venir" ‚Üí "En cours" ‚Üí "Termin√©"
 *
 * ## Architecture et int√©gration utilitaires
 *
 * ### üõ†Ô∏è Fonctions utilitaires sp√©cialis√©es
 * - **getEventStatus()** : Calcul logique statut selon date/time vs maintenant
 * - **getStatusColor()** : Mapping statut ‚Üí classes CSS couleurs Tailwind
 * - **S√©paration responsabilit√©s** : Logique m√©tier vs affichage s√©par√©s
 * - **Testabilit√©** : Fonctions utilitaires unit-testables isol√©ment
 * - **Maintenance** : Logique centralis√©e dans utils/ pour r√©utilisation
 * - **Consistency** : M√™me logique statut partout dans application
 *
 * ### üìä Types et interfaces temporelles
 * - **Date** : string - Format date compatible calculs temporels
 * - **Time** : string - Format heure compl√©mentaire date
 * - **Status** : string - R√©sultat calcul√© ("√Ä venir"/"En cours"/"Termin√©")
 * - **StatusColor** : string - Classes CSS Tailwind pour couleurs badge
 * - **Props simples** : Interface EventStatusProps avec date + time
 * - **Type safety** : Validation param√®tres via TypeScript strict
 *
 * ## √âtats et couleurs contextuelles
 *
 * ### üö¶ Mapping √©tats ‚Üí couleurs syst√®me
 * - **"√Ä venir"** : Couleurs bleues/grises pour √©v√©nements futurs
 * - **"En cours"** : Couleurs orange/jaunes pour √©v√©nements actifs
 * - **"Termin√©"** : Couleurs vertes/grises pour √©v√©nements pass√©s
 * - **Consistance visuelle** : M√™me code couleur dans toute application
 * - **Accessibilit√©** : Contrastes respectant standards WCAG AA
 * - **Semantic colors** : Couleurs intuitives selon signification m√©tier
 *
 * ### üéØ Logique temporelle √©v√©nements olympiques
 * - **Pr√©cision** : Calculs bas√©s date ET heure pour timing exact
 * - **Timezone** : Gestion fuseaux horaires selon localisation JO
 * - **Dur√©e √©v√©nements** : Prise en compte dur√©e typique comp√©titions
 * - **Buffer temporal** : Marge avant/apr√®s pour transitions statuts
 * - **Real-time updates** : Calculs refl√®tent progression temps r√©elle
 * - **Coordination** : Synchronisation avec planning officiel JO
 *
 * ## Performance et optimisations temporelles
 *
 * ### ‚ö° Optimisations calculs temps r√©el
 * - **Fonctions pures** : getEventStatus et getStatusColor sans side effects
 * - **Calculs l√©gers** : Comparaisons temporelles rapides
 * - **Pas de polling** : Mise √† jour via re-renders parent naturels
 * - **Memoization possible** : Candidat React.memo si calculs fr√©quents
 * - **Cache temporal** : Possibilit√© cache r√©sultats courts termes
 * - **Lazy evaluation** : Calculs seulement si composant affich√©
 *
 * ### üîß Consid√©rations performance temps r√©el
 * - **Re-render frequency** : Optimisation selon fr√©quence mise √† jour
 * - **Batch updates** : Groupement calculs si nombreux √©v√©nements
 * - **Intersection observer** : Calculs seulement √©l√©ments visibles
 * - **Web Workers** : Calculs lourds en background si n√©cessaire
 * - **Debouncing** : Limitation fr√©quence recalculs si appropri√©
 * - **Memory efficiency** : Pas de stockage √©tats temporels
 *
 * ## Int√©gration et responsive design
 *
 * ### üì± Adaptation multi-supports badges
 * - **Badge responsive** : Taille fixe text-xs adapt√©e tous √©crans
 * - **Couleurs mobiles** : Contrastes maintenus sur √©crans vari√©s
 * - **Touch visibility** : Badge suffisamment visible interfaces tactiles
 * - **Layout stable** : Taille constante √©vite reflow cellules
 * - **Consistent spacing** : px-2 py-1 uniforme sur tous supports
 * - **Screen readers** : Contenu textuel accessible assistive technologies
 *
 * ### ‚ôø Accessibilit√© statuts temporels
 * - **Contenu textuel** : Status string lisible screen readers
 * - **Couleurs significatives** : Pas uniquement d√©pendant couleur pour info
 * - **Contraste √©lev√©** : Couleurs respectent ratios WCAG AA
 * - **Semantic meaning** : Statuts compr√©hensibles sans contexte visuel
 * - **Font weight** : font-semibold pour lisibilit√© am√©lior√©e
 * - **Alternative text** : Contenu textuel suffit, pas besoin alt
 *
 * ## Sp√©cificit√©s m√©tier √©v√©nements olympiques
 *
 * ### üèÖ Contexte temporel JO 2024
 * - **Planning officiel** : Calculs bas√©s horaires officiels CIO
 * - **Fuseaux multiples** : Gestion horaires internationaux diffusion
 * - **Pr√©cision timing** : Importance cruciale timing exact comp√©titions
 * - **√âtats significatifs** : Statuts align√©s workflow organisationnel JO
 * - **Coordination** : Synchronisation √©quipes, m√©dias, spectateurs
 * - **Real-time critical** : Importance information temps r√©el √©v√©nements
 *
 * ### üìÖ Gestion temporelle sp√©cialis√©e olympique
 * - **Sessions programm√©es** : √âv√©nements avec cr√©neaux horaires fixes
 * - **Dur√©es variables** : √âpreuves courtes (sprint) vs longues (marathon)
 * - **Transitions rapides** : Changements statut selon progression
 * - **Buffer zones** : Marges temporelles setup/breakdown √©v√©nements
 * - **Multi-timezone** : Support audiences internationales
 * - **Broadcasting sync** : Coordination retransmissions TV/stream
 *
 * ## S√©curit√© et robustesse temporelle
 *
 * ### üîí Validation donn√©es temporelles
 * - **Format validation** : V√©rification formats date/time valides
 * - **Range checking** : Validation dates coh√©rentes (pas futures aberrantes)
 * - **Null safety** : Protection contre param√®tres undefined/null
 * - **Error boundaries** : Gestion gracieuse erreurs calculs temporels
 * - **Fallback states** : √âtats par d√©faut si calculs √©chouent
 * - **Type safety** : Interfaces strictes pour param√®tres temporels
 *
 * ### ‚úÖ Robustesse calculs statuts
 * - **Edge cases** : Gestion cas limites (minuit, changements horaires)
 * - **Timezone safe** : Calculs corrects ind√©pendamment timezone locale
 * - **Date parsing** : Gestion robuste formats date variables
 * - **Error recovery** : √âtats fallback si erreurs calculs
 * - **Consistency** : M√™me r√©sultat calculs pour m√™mes inputs
 * - **Bounds checking** : Validation coh√©rence param√®tres temporels
 *
 * ## Am√©liorations et extensions possibles
 *
 * ### üöÄ Fonctionnalit√©s avanc√©es temporelles
 * - **Real-time websocket** : Mise √† jour temps r√©el via WebSocket
 * - **Countdown timers** : Affichage temps restant avant d√©but
 * - **Progress indicators** : Barre progression pendant √©v√©nement
 * - **Time zones display** : Affichage multi-timezone simultan√©
 * - **Historical states** : Log changements statut pour audit
 * - **Notifications** : Alertes changements statut importantes
 *
 * ### üé® Am√©liorations visuelles temporelles
 * - **Animations** : Transitions smooth changements statut
 * - **Pulsing effects** : Animation "En cours" pour attirer attention
 * - **Icons integration** : Ic√¥nes temporelles avant/avec texte
 * - **Gradient colors** : D√©grad√©s couleurs pour nuances statut
 * - **Size variations** : Tailles diff√©rentes selon importance statut
 * - **Tooltips temporels** : D√©tails timing au survol badge
 *
 * ### üîß Optimisations techniques avanc√©es
 * - **Memo optimization** : React.memo pour √©viter recalculs inutiles
 * - **Web Workers** : Calculs temporels complexes en background
 * - **Service Worker** : Cache statuts pour offline support
 * - **IndexedDB** : Stockage local historique statuts
 * - **Real-time sync** : Synchronisation temps serveur pr√©cise
 * - **Performance monitoring** : M√©triques performance calculs
 *
 * @param {EventStatusProps} props - Configuration du badge de statut
 * @param {string} props.date - Date de l'√©v√©nement pour calculs temporels
 * @param {string} props.time - Heure de l'√©v√©nement pour pr√©cision timing
 *
 * @returns {JSX.Element} Badge color√© avec statut temps r√©el de l'√©v√©nement
 *
 * @see {@link EvenementsTableRow} - Composant parent int√©grant ce badge statut
 * @see {@link getEventStatus} - Fonction utilitaire de calcul statut temporel
 * @see {@link getStatusColor} - Fonction utilitaire mapping couleurs statut
 * @see {@link statutEvenement} - Module utilitaires gestion statuts √©v√©nements
 *
 * @since 1.0.0
 * @version 1.0.0
 *
 * @example
 * ```tsx
 * // Utilisation dans EvenementsTableRow
 * <td className="px-6 py-4 whitespace-nowrap">
 *   <EventStatus date={event.date} time={event.horraire} />
 * </td>
 * ```
 *
 * @example
 * ```tsx
 * // Exemples de statuts calcul√©s selon timing
 * // √âv√©nement futur
 * <EventStatus date="2024-07-30" time="20:30" /> // ‚Üí "√Ä venir" (bleu)
 *
 * // √âv√©nement en cours (si maintenant dans cr√©neau)
 * <EventStatus date="2024-07-26" time="14:00" /> // ‚Üí "En cours" (orange)
 *
 * // √âv√©nement pass√©
 * <EventStatus date="2024-07-25" time="10:00" /> // ‚Üí "Termin√©" (vert)
 * ```
 */
export default function EventStatus({ date, time }: EventStatusProps) {
  const status = getEventStatus(date, time);
  
  return (
    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(status)}`}>
      {status}
    </span>
  );
}
