/**
 * Contexte d'authentification de l'application AdminJO
 *
 * Ce module fournit le contexte React pour la gestion compl√®te de l'authentification
 * des administrateurs dans l'application AdminJO. Il g√®re les sessions utilisateurs,
 * la persistance des donn√©es, le refresh automatique des tokens et la s√©curit√© d'acc√®s.
 *
 * @module AuthContext
 * @category Contexts
 */

'use client';

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import { login as loginService, logout as logoutService, refreshToken } from '@/lib/api/auth/authService';
import { setSessionExpiredCallback, isTokenValid } from '@/lib/api/core/tokenHelpers';
import SessionExpiredModal from '@/components/connexion/SessionExpiredModal';


/**
 * Interface repr√©sentant un utilisateur authentifi√©
 *
 * D√©finit la structure des donn√©es utilisateur stock√©es dans le contexte
 * d'authentification. Seuls les utilisateurs avec le r√¥le 'admin' peuvent
 * acc√©der √† l'application.
 *
 * @interface User
 */
export interface User {
  /** Adresse email de l'utilisateur administrateur */
  email: string;
  /** R√¥le de l'utilisateur - doit √™tre 'admin' pour l'acc√®s */
  role: string;
}

/**
 * Interface du contexte d'authentification
 *
 * D√©finit l'API compl√®te du contexte d'authentification avec toutes les
 * fonctionnalit√©s de gestion de session, navigation et s√©curit√©.
 *
 * @interface AuthContextType
 */
export interface AuthContextType {
  /** Donn√©es de l'utilisateur connect√© ou null si non connect√© */
  user: User | null;
  /** √âtat d'authentification calcul√© bas√© sur la pr√©sence de l'utilisateur */
  isAuthenticated: boolean;
  /** Indicateur de chargement pendant les op√©rations d'authentification */
  isLoading: boolean;
  /** Fonction de connexion avec email et mot de passe */
  login: (email: string, password: string) => Promise<void>;
  /** Fonction de d√©connexion volontaire */
  logout: () => void;
  /** Fonction de d√©connexion forc√©e en cas d'expiration de session */
  forceLogout: () => void;
  /** Route sauvegard√©e pour redirection apr√®s reconnexion */
  currentRoute: string | null;
  /** Fonction pour sauvegarder la route courante */
  saveCurrentRoute: (route: string) => void;
  /** Fonction pour r√©cup√©rer et effacer la route sauvegard√©e */
  getAndClearSavedRoute: () => string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

/**
 * Props du composant AuthProvider
 *
 * @interface AuthProviderProps
 */
export interface AuthProviderProps {
  /** Composants enfants √† enrober dans le contexte */
  children: ReactNode;
}

/**
 * Composant AuthProvider - Fournisseur de contexte d'authentification
 *
 * Ce composant enrobe l'application enti√®re et fournit toutes les fonctionnalit√©s
 * d'authentification √† travers un contexte React. Il g√®re la persistance des sessions,
 * le refresh automatique des tokens, et la s√©curit√© d'acc√®s aux administrateurs.
 *
 * @name AuthProvider
 *
 * ## Fonctionnalit√©s principales
 *
 * ### Gestion des sessions
 * - **V√©rification automatique** : Contr√¥le de validit√© des tokens au chargement
 * - **Refresh automatique** : Renouvellement des tokens expir√©s via refreshToken()
 * - **Persistance locale** : Sauvegarde email/r√¥le dans localStorage
 * - **Synchronisation d'√©tat** : Mise √† jour en temps r√©el du statut d'authentification
 *
 * ### S√©curit√© d'acc√®s
 * - **Restriction aux admins** : Seuls les utilisateurs avec role='admin' peuvent se connecter
 * - **Validation des tokens** : V√©rification continue de la validit√© des tokens d'acc√®s
 * - **Gestion d'expiration** : Modal d'expiration de session avec possibilit√© de reconnexion
 * - **Nettoyage s√©curis√©** : Suppression compl√®te des donn√©es en cas de d√©connexion
 *
 * ### Navigation intelligente
 * - **Sauvegarde de route** : Conservation de la page courante lors d'une expiration
 * - **Redirection automatique** : Retour √† la page pr√©c√©dente apr√®s reconnexion
 * - **Protection des routes** : Redirection vers '/' pour les utilisateurs non autoris√©s
 *
 * ## √âtats g√©r√©s
 *
 * - **user** : Donn√©es utilisateur (email, role) ou null
 * - **isLoading** : √âtat de chargement pendant les op√©rations d'auth
 * - **showSessionExpiredModal** : Affichage de la modal d'expiration
 * - **currentRoute** : Route sauvegard√©e pour redirection post-reconnexion
 *
 * ## Cycle de vie d'authentification
 *
 * 1. **Initialisation** : V√©rification des tokens stock√©s au chargement
 * 2. **Connexion** : Validation r√¥le admin + sauvegarde donn√©es utilisateur
 * 3. **Session active** : Monitoring continu + refresh automatique des tokens
 * 4. **Expiration** : D√©connexion forc√©e + modal de reconnexion
 * 5. **D√©connexion** : Nettoyage complet + redirection vers page d'accueil
 *
 * ## Int√©grations
 *
 * - **authService** : Services de connexion/d√©connexion/refresh
 * - **tokenHelpers** : Utilitaires de validation et gestion des tokens
 * - **SessionExpiredModal** : Composant modal pour les sessions expir√©es
 * - **useRouter** : Navigation programm√©e Next.js
 *
 * @param {AuthProviderProps} props - Props avec children √† enrober
 * @returns {JSX.Element} Provider du contexte avec modal de session
 *
 * @see {@link useAuth} - Hook pour consommer le contexte
 * @see {@link SessionExpiredModal} - Modal d'expiration de session
 * @see authService - Services d'authentification
 * @see tokenHelpers - Utilitaires de gestion des tokens
 */
export function AuthProvider({ children }: AuthProviderProps) {
  const router = useRouter();
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [showSessionExpiredModal, setShowSessionExpiredModal] = useState(false);
  const [currentRoute, setCurrentRoute] = useState<string | null>(null);

  const isAuthenticated = !!user;

  /**
   * Fonction de d√©connexion forc√©e en cas d'expiration de session
   *
   * Cette fonction est appel√©e automatiquement par le syst√®me de gestion des tokens
   * lorsqu'une session expire. Elle sauvegarde la route courante pour permettre
   * une redirection apr√®s reconnexion et affiche la modal d'expiration.
   *
   * ## Actions effectu√©es
   * 1. Log de d√©connexion forc√©e (en d√©veloppement)
   * 2. Sauvegarde de la route courante si diff√©rente de '/' ou '/login'
   * 3. Appel du service de d√©connexion
   * 4. Nettoyage du localStorage (email et r√¥le)
   * 5. Reset de l'√©tat utilisateur
   * 6. Affichage de la modal d'expiration de session
   *
   * @function forceLogout
   */
  const forceLogout = () => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîí Session expir√©e, d√©connexion forc√©e');
    }
    if (typeof window !== 'undefined') {
      const currentPath = window.location.pathname;
      if (currentPath !== '/' && currentPath !== '/login') {
        setCurrentRoute(currentPath);
        if (process.env.NODE_ENV === 'development') {
          console.log('üìç Route sauvegard√©e pour reconnexion:', currentPath);
        }
      }
    }
    logoutService();
    if (typeof window !== 'undefined' && window.localStorage) {
      try {
        localStorage.removeItem('user_email');
        localStorage.removeItem('user_role');
      } catch (error) {
        console.warn('Impossible de supprimer les donn√©es utilisateur:', error);
      }
    }
    setUser(null);
    setShowSessionExpiredModal(true);
  };

  /**
   * Gestionnaire de fermeture de la modal d'expiration
   *
   * Ferme la modal d'expiration de session et redirige l'utilisateur
   * vers la page d'accueil pour qu'il puisse se reconnecter.
   *
   * @function handleSessionExpired
   */
  const handleSessionExpired = () => {
    setShowSessionExpiredModal(false);
    router.push('/');
  };

  useEffect(() => {
    const checkAuth = async () => {
      if (typeof window !== 'undefined' && window.localStorage) {
        try {
          // V√©rifier si le token d'acc√®s est valide (non expir√©)
          const tokenValid = isTokenValid();
          
          if (tokenValid) {
            // Le token est valide, r√©cup√©rer l'email et le r√¥le
            const storedEmail = localStorage.getItem('user_email');
            const storedRole = localStorage.getItem('user_role');
            if (storedEmail && storedRole) {
              // V√©rifier que l'utilisateur stock√© est bien admin
              if (storedRole === 'admin') {
                setUser({ email: storedEmail, role: storedRole });
              } else {
                // Utilisateur non-admin, d√©connexion
                logoutService();
              }
            } else {
              // Donn√©es manquantes, d√©connexion
              logoutService();
            }
          } else {
            // Token invalide ou expir√©, tenter de le rafra√Æchir
            try {
              // Tenter de rafra√Æchir le token
              await refreshToken();
              
              // Si le refresh r√©ussit, r√©cup√©rer les donn√©es utilisateur
              const storedEmail = localStorage.getItem('user_email');
              const storedRole = localStorage.getItem('user_role');
              if (storedEmail && storedRole && storedRole === 'admin') {
                setUser({ email: storedEmail, role: storedRole });
              } else {
                logoutService();
              }
            } catch {
              // Refresh √©chou√©, d√©connexion
              logoutService();
            }
          }
        } catch (error) {
          console.warn('localStorage non disponible:', error);
          logoutService();
        }
      }
      setIsLoading(false);
    };

    // √âcouter les √©v√©nements de refresh de token pour synchroniser l'√©tat
    const handleTokenRefreshed = () => {
      // Pas besoin de recharger l'utilisateur, juste confirmer que le token est valide
    };
    
    setSessionExpiredCallback(forceLogout);
    
    // Ajouter l'√©couteur d'√©v√©nements pour le refresh de token
    if (typeof window !== 'undefined') {
      window.addEventListener('tokenRefreshed', handleTokenRefreshed);
    }
    
    checkAuth();

    // Nettoyer l'√©couteur d'√©v√©nements
    return () => {
      if (typeof window !== 'undefined') {
        window.removeEventListener('tokenRefreshed', handleTokenRefreshed);
      }
    };
  }, []); 


  /**
   * Fonction de connexion avec validation du r√¥le administrateur
   *
   * Authentifie un utilisateur avec email/mot de passe et v√©rifie qu'il poss√®de
   * le r√¥le 'admin' requis pour acc√©der √† l'application d'administration.
   *
   * ## Processus de connexion
   * 1. Activation de l'√©tat de chargement
   * 2. Appel du service de connexion avec les identifiants
   * 3. V√©rification du r√¥le 'admin' dans la r√©ponse
   * 4. Sauvegarde des donn√©es utilisateur dans localStorage
   * 5. Mise √† jour de l'√©tat utilisateur dans le contexte
   *
   * ## Gestion des erreurs
   * - **R√¥le non-admin** : D√©connexion automatique + erreur explicite
   * - **√âchec de connexion** : Propagation de l'erreur du service
   * - **Probl√®me localStorage** : Warning mais pas d'√©chec de connexion
   *
   * @param {string} email - Adresse email de l'administrateur
   * @param {string} password - Mot de passe de l'administrateur
   * @returns {Promise<void>} Promise r√©solue en cas de succ√®s
   * @throws {Error} Erreur si les identifiants sont invalides ou r√¥le non-admin
   *
   */
  const login = async (email: string, password: string) => {
    setIsLoading(true);
    try {
      const data = await loginService({ email, password });

      // L'API retourne maintenant le r√¥le et l'email directement
      const { role, email: userEmail } = data;

      // V√©rifier que seuls les administrateurs peuvent se connecter
      if (role !== 'admin') {
        logoutService();
        setUser(null);
        throw new Error("Acc√®s r√©serv√© aux administrateurs. Votre r√¥le actuel ne vous permet pas d'acc√©der √† cette application.");
      }

      // Sauvegarder l'email pour la persistance de session
      if (typeof window !== 'undefined' && window.localStorage) {
        try {
          localStorage.setItem('user_email', userEmail);
          localStorage.setItem('user_role', role);
        } catch (error) {
          console.warn('Impossible de sauvegarder les donn√©es utilisateur:', error);
        }
      }

      setUser({ email: userEmail, role });
    } catch (error) {
      setUser(null);
      throw error;
    } finally {
      setIsLoading(false);
    }
  };

  /**
   * Fonction de d√©connexion volontaire
   *
   * D√©connecte l'utilisateur de mani√®re volontaire (bouton d√©connexion)
   * et effectue un nettoyage complet des donn√©es de session.
   *
   * ## Actions effectu√©es
   * 1. Appel du service de d√©connexion (invalidation des tokens)
   * 2. Suppression des donn√©es utilisateur du localStorage
   * 3. Reset de l'√©tat utilisateur dans le contexte
   * 4. Redirection vers la page d'accueil
   *
   * @function logout
   */
  const logout = () => {
    logoutService();

    if (typeof window !== 'undefined' && window.localStorage) {
      try {
        localStorage.removeItem('user_email');
        localStorage.removeItem('user_role');
      } catch (error) {
        console.warn('Impossible de supprimer les donn√©es utilisateur:', error);
      }
    }

    setUser(null);

    router.push('/');
  };

  /**
   * Fonction de sauvegarde de la route courante
   *
   * Sauvegarde la route actuelle pour permettre une redirection
   * apr√®s reconnexion en cas d'expiration de session.
   *
   * @param {string} route - Route √† sauvegarder
   * @function saveCurrentRoute
   */
  const saveCurrentRoute = (route: string) => {
    setCurrentRoute(route);
  };

  /**
   * Fonction de r√©cup√©ration et effacement de la route sauvegard√©e
   *
   * R√©cup√®re la route pr√©c√©demment sauvegard√©e et l'efface du contexte
   * pour √©viter les redirections ind√©sirables lors des prochaines connexions.
   *
   * @returns {string | null} Route sauvegard√©e ou null si aucune route
   * @function getAndClearSavedRoute
   */
  const getAndClearSavedRoute = () => {
    const savedRoute = currentRoute;
    setCurrentRoute(null);
    return savedRoute;
  };

  const value = {
      user,
      isAuthenticated,
      isLoading,
      login,
      logout,
      forceLogout,
      currentRoute,
      saveCurrentRoute,
      getAndClearSavedRoute,
  };

  return (
      <AuthContext.Provider value={value}>
          {children}
          <SessionExpiredModal
              isOpen={showSessionExpiredModal}
              onClose={() => setShowSessionExpiredModal(false)}
              onReconnect={handleSessionExpired}
          />
      </AuthContext.Provider>
  );
}

/**
 * Hook useAuth - Consommateur du contexte d'authentification
 *
 * Hook personnalis√© pour acc√©der au contexte d'authentification depuis
 * n'importe quel composant enfant du AuthProvider. Fournit une interface
 * simple pour toutes les op√©rations d'authentification.
 *
 * @name useAuth
 *
 * ## Fonctionnalit√©s fournies
 *
 * ### √âtat d'authentification
 * - **user** : Donn√©es de l'utilisateur connect√© (email, role)
 * - **isAuthenticated** : Boolean indiquant si l'utilisateur est connect√©
 * - **isLoading** : √âtat de chargement des op√©rations d'authentification
 *
 * ### Actions disponibles
 * - **login()** : Connexion avec email/mot de passe
 * - **logout()** : D√©connexion volontaire
 * - **forceLogout()** : D√©connexion forc√©e (expiration)
 *
 * ### Gestion de navigation
 * - **currentRoute** : Route sauvegard√©e pour redirection
 * - **saveCurrentRoute()** : Sauvegarder la route courante
 * - **getAndClearSavedRoute()** : R√©cup√©rer et effacer la route sauvegard√©e
 *
 * ## Validation d'utilisation
 *
 * Le hook v√©rifie automatiquement qu'il est utilis√© dans un composant
 * enfant du AuthProvider et l√®ve une erreur explicite si ce n'est pas le cas.
 *
 * @returns {AuthContextType} Interface compl√®te du contexte d'authentification
 * @throws {Error} Erreur si utilis√© en dehors d'un AuthProvider
 *
 */
export function useAuth() {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth doit √™tre utilis√© dans un AuthProvider');
    }
    return context;
}