'use client';

import { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { useRouter } from 'next/navigation';
import { login as loginService, logout as logoutService } from '@/lib/api/auth/authService';
import { setSessionExpiredCallback } from '@/lib/api/core/tokenHelpers';
import SessionExpiredModal from '@/components/connexion/SessionExpiredModal';

/**
 * Interface repr√©sentant un utilisateur connect√©
 */
interface User {
  email: string; // Email de l'utilisateur connect√©
}

/**
 * Interface d√©finissant les fonctions et √©tats disponibles dans le contexte d'authentification
 */
interface AuthContextType {
  user: User | null;           // Utilisateur connect√© ou null si non connect√©
  isAuthenticated: boolean;    // Bool√©en indiquant si l'utilisateur est connect√©
  isLoading: boolean;          // Bool√©en indiquant si l'authentification est en cours de v√©rification
  login: (email: string, password: string) => Promise<void>; // Fonction de connexion
  logout: () => void;          // Fonction de d√©connexion manuelle
  forceLogout: () => void;     // Fonction de d√©connexion forc√©e (quand session expire)
  currentRoute: string | null; // Route actuelle sauvegard√©e pour persistance apr√®s reconnexion
  saveCurrentRoute: (route: string) => void; // Fonction pour sauvegarder la route actuelle
  getAndClearSavedRoute: () => string | null; // Fonction pour r√©cup√©rer et effacer la route sauvegard√©e
}

/**
 * Context React pour l'authentification
 * Undefined par d√©faut pour d√©tecter les erreurs d'utilisation
 */
const AuthContext = createContext<AuthContextType | undefined>(undefined);

/**
 * Props pour le composant AuthProvider
 */
interface AuthProviderProps {
  children: ReactNode; // Composants enfants qui auront acc√®s au contexte
}

/**
 * Composant Provider pour l'authentification
 * 
 * Ce composant :
 * - G√®re l'√©tat d'authentification global de l'application
 * - V√©rifie automatiquement si l'utilisateur est connect√© au chargement
 * - Fournit les fonctions de connexion/d√©connexion
 * - G√®re l'expiration de session avec un modal automatique
 * - Sauvegarde l'√©tat d'authentification dans le localStorage
 * 
 * @param props - Les propri√©t√©s du composant
 * @returns JSX.Element - Le provider d'authentification
 */
export function AuthProvider({ children }: AuthProviderProps) {
  // Hook pour la navigation Next.js
  const router = useRouter();
  
  // √âtat de l'utilisateur connect√© (null si non connect√©)
  const [user, setUser] = useState<User | null>(null);
  
  // √âtat de chargement pour √©viter les rendus pr√©matur√©s
  const [isLoading, setIsLoading] = useState(true);
  
  // √âtat pour contr√¥ler l'affichage du modal d'expiration de session
  const [showSessionExpiredModal, setShowSessionExpiredModal] = useState(false);
  
  // √âtat pour sauvegarder la route actuelle lors de l'expiration de session
  // Permet de revenir √† la m√™me page apr√®s reconnexion
  const [currentRoute, setCurrentRoute] = useState<string | null>(null);

  // Calculer si l'utilisateur est authentifi√©
  const isAuthenticated = !!user;

  /**
   * Fonction de d√©connexion forc√©e utilis√©e quand la session expire
   * 
   * Cette fonction :
   * - Sauvegarde la route actuelle pour y revenir apr√®s reconnexion
   * - Nettoie les tokens d'authentification
   * - Supprime les informations utilisateur du localStorage
   * - R√©initialise l'√©tat utilisateur
   * - Affiche le modal d'expiration de session
   */
  const forceLogout = () => {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîí Session expir√©e, d√©connexion forc√©e');
    }
    
    // Sauvegarder la route actuelle pour y revenir apr√®s reconnexion
    if (typeof window !== 'undefined') {
      const currentPath = window.location.pathname;
      if (currentPath !== '/' && currentPath !== '/login') {
        setCurrentRoute(currentPath);
        if (process.env.NODE_ENV === 'development') {
          console.log('üìç Route sauvegard√©e pour reconnexion:', currentPath);
        }
      }
    }
    
    // Nettoyer les tokens c√¥t√© serveur
    logoutService();
    
    // Nettoyer les informations utilisateur du localStorage
    if (typeof window !== 'undefined' && window.localStorage) {
      try {
        localStorage.removeItem('user_email');
      } catch (error) {
        console.warn('Impossible de supprimer l\'email:', error);
      }
    }
    
    // R√©initialiser l'√©tat utilisateur
    setUser(null);
    
    // Afficher le modal d'expiration de session
    setShowSessionExpiredModal(true);
  };

  /**
   * Fonction appel√©e quand l'utilisateur doit se reconnecter
   * (depuis le modal d'expiration de session)
   */
  const handleSessionExpired = () => {
    // Fermer le modal
    setShowSessionExpiredModal(false);
    
    // Rediriger vers la page de connexion avec le router Next.js
    router.push('/');
  };

  /**
   * Effet pour v√©rifier l'authentification au chargement de l'application
   * et configurer le callback d'expiration de session
   */
  useEffect(() => {
    /**
     * Fonction pour v√©rifier si l'utilisateur est connect√©
     * en regardant les tokens dans le localStorage
     */
    const checkAuth = () => {
      // V√©rifier si nous sommes c√¥t√© client (localStorage disponible)
      if (typeof window !== 'undefined' && window.localStorage) {
        try {
          // R√©cup√©rer le token d'authentification
          const token = localStorage.getItem(process.env.NEXT_PUBLIC_AUTH_TOKEN_KEY || 'auth_token');
          
          // Si un token existe, r√©cup√©rer l'email utilisateur
          if (token) {
            const storedEmail = localStorage.getItem('user_email');
            if (storedEmail) {
              // Restaurer l'√©tat utilisateur depuis le localStorage
              setUser({ email: storedEmail });
            }
          }
        } catch (error) {
          // Si localStorage n'est pas disponible ou l√®ve une erreur, on ignore
          console.warn('localStorage non disponible:', error);
        }
      }
      
      // Marquer la v√©rification d'authentification comme termin√©e
      setIsLoading(false);
    };

    // Configurer le callback pour l'expiration de session
    // Ce callback sera appel√© par le syst√®me d'authentification quand la session expire
    setSessionExpiredCallback(forceLogout);

    // Effectuer la v√©rification d'authentification
    checkAuth();
  }, []); // Effet ex√©cut√© une seule fois au montage du composant

  /**
   * Fonction de connexion
   * 
   * @param email - Email de l'utilisateur
   * @param password - Mot de passe de l'utilisateur
   * @throws Error - Si la connexion √©choue
   */
  const login = async (email: string, password: string) => {
    try {
      // Appeler le service de connexion qui g√®re l'API
      await loginService({ email, password });
      
      // Sauvegarder l'email dans le localStorage pour la persistance
      if (typeof window !== 'undefined' && window.localStorage) {
        try {
          localStorage.setItem('user_email', email);
        } catch (error) {
          console.warn('Impossible de sauvegarder l\'email:', error);
        }
      }
      
      // Mettre √† jour l'√©tat utilisateur
      setUser({ email });
      
      // Si nous avons une route sauvegard√©e (apr√®s expiration de session),
      // rediriger vers cette route avec le router Next.js
      if (currentRoute) {
        setTimeout(() => {
          const routeToRestore = currentRoute;
          setCurrentRoute(null); // Effacer la route sauvegard√©e
          if (process.env.NODE_ENV === 'development') {
            console.log('üîÑ Redirection vers la route sauvegard√©e:', routeToRestore);
          }
          router.push(routeToRestore);
        }, 100);
      } else {
        // Si pas de route sauvegard√©e, rediriger vers le dashboard
        setTimeout(() => {
          router.push('/dashboard');
        }, 100);
      }
    } catch (error) {
      // Propager l'erreur pour que le composant appelant puisse la g√©rer
      throw error;
    }
  };

  /**
   * Fonction de d√©connexion manuelle
   * (utilis√©e quand l'utilisateur clique sur "Se d√©connecter")
   */
  const logout = () => {
    // Nettoyer les tokens c√¥t√© serveur
    logoutService();
    
    // Nettoyer les informations utilisateur du localStorage
    if (typeof window !== 'undefined' && window.localStorage) {
      try {
        localStorage.removeItem('user_email');
      } catch (error) {
        console.warn('Impossible de supprimer l\'email:', error);
      }
    }
    
    // R√©initialiser l'√©tat utilisateur
    setUser(null);
    
    // Rediriger vers la page de connexion
    router.push('/');
  };

  /**
   * Fonction pour sauvegarder la route actuelle
   * Utilis√©e avant l'expiration de session pour pouvoir y revenir apr√®s reconnexion
   * 
   * @param route - Route √† sauvegarder
   */
  const saveCurrentRoute = (route: string) => {
    setCurrentRoute(route);
  };

  /**
   * Fonction pour r√©cup√©rer et effacer la route sauvegard√©e
   * Utilis√©e apr√®s reconnexion pour revenir √† la page pr√©c√©dente
   * 
   * @returns string | null - La route sauvegard√©e ou null
   */
  const getAndClearSavedRoute = () => {
    const savedRoute = currentRoute;
    setCurrentRoute(null);
    return savedRoute;
  };

  // Cr√©er l'objet de valeur du contexte
  const value = {
    user,
    isAuthenticated,
    isLoading,
    login,
    logout,
    forceLogout,
    currentRoute,
    saveCurrentRoute,
    getAndClearSavedRoute,
  };

  return (
    <AuthContext.Provider value={value}>
      {/* Rendre les composants enfants avec acc√®s au contexte */}
      {children}
      
      {/* Modal d'expiration de session affich√© conditionnellement */}
      <SessionExpiredModal
        isOpen={showSessionExpiredModal}
        onClose={() => setShowSessionExpiredModal(false)}
        onReconnect={handleSessionExpired}
      />
    </AuthContext.Provider>
  );
}

/**
 * Hook personnalis√© pour utiliser le contexte d'authentification
 * 
 * Ce hook :
 * - V√©rifie que le contexte est disponible
 * - Retourne les fonctions et √©tats d'authentification
 * - Doit √™tre utilis√© dans les composants enfants d'AuthProvider
 * 
 * @returns AuthContextType - Les fonctions et √©tats d'authentification
 * @throws Error - Si utilis√© en dehors d'un AuthProvider
 * 
 * @example
 * ```tsx
 * function MyComponent() {
 *   const { user, isAuthenticated, login, logout } = useAuth();
 *   
 *   if (!isAuthenticated) {
 *     return <LoginForm onLogin={login} />;
 *   }
 *   
 *   return <div>Bonjour {user?.email}</div>;
 * }
 * ```
 */
export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth doit √™tre utilis√© dans un AuthProvider');
  }
  return context;
}