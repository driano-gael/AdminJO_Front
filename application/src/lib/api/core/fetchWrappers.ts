/**
 * Wrappers pour les requ√™tes API avec gestion automatique de l'authentification
 * 
 * Ce fichier contient :
 * - La fonction principale fetchApi qui g√®re toutes les requ√™tes
 * - La gestion automatique du refresh token en cas d'erreur 401
 * - La gestion des erreurs et de l'expiration de session
 * - La configuration des variables d'environnement
 */

import { makeRequest } from './httpHelpers';
import { refreshToken } from '../auth/authService';
import { clearTokens, notifySessionExpired } from './tokenHelpers';

// Validation des variables d'environnement requises
const baseUrl = process.env.NEXT_PUBLIC_API_URL!;
const tokenKey = process.env.NEXT_PUBLIC_AUTH_TOKEN_KEY!;
const refreshKey = process.env.NEXT_PUBLIC_AUTH_REFRESH_TOKEN_KEY!;

// V√©rifications de s√©curit√© au chargement du module
if (!baseUrl) throw new Error("API base URL is not d√©fini.");
if (!tokenKey) throw new Error("NEXT_PUBLIC_AUTH_TOKEN_KEY est manquant.");
if (!refreshKey) throw new Error("NEXT_PUBLIC_AUTH_REFRESH_TOKEN_KEY est manquant.");

/**
 * Fonction principale pour effectuer des requ√™tes API avec gestion automatique de l'authentification
 * 
 * Cette fonction :
 * - Effectue la requ√™te HTTP initiale
 * - G√®re automatiquement le refresh token en cas d'erreur 401
 * - Parse les r√©ponses JSON
 * - G√®re les erreurs et l'expiration de session
 * 
 * @param endpoint - L'endpoint de l'API (exemple: '/users', '/auth/login')
 * @param options - Options de la requ√™te fetch (method, body, headers, etc.)
 * @param requiresAuth - Indique si la requ√™te n√©cessite une authentification (true par d√©faut pour la s√©curit√©)
 * @returns Promise<T> - Les donn√©es pars√©es de la r√©ponse
 * @throws Error - Si la requ√™te √©choue ou si la session expire
 */
export async function fetchApi<T = unknown>(
    endpoint: string,
    options: RequestInit = {},
    requiresAuth = true
): Promise<T> {
    // Effectuer la requ√™te HTTP initiale
    let response = await makeRequest(endpoint, options, requiresAuth);
  
    // Gestion du refresh automatique pour les erreurs 401 (Unauthorized)
    if (response.status === 401 && requiresAuth) {
        if (process.env.NODE_ENV === 'development') {
            console.log('üîÑ Token expir√©, tentative de refresh...');
        }
        
        // Tenter de rafra√Æchir le token
        const refreshed = await tryRefreshToken();
        
        if (refreshed) {
            if (process.env.NODE_ENV === 'development') {
                console.log('‚úÖ Token refresh√© avec succ√®s, nouvelle tentative...');
            }
            
            // √âmettre un √©v√©nement pour informer de la r√©ussite du refresh (optionnel)
            if (typeof window !== 'undefined') {
                window.dispatchEvent(new CustomEvent('tokenRefreshed'));
            }
            
            // Refaire la requ√™te avec le nouveau token
            response = await makeRequest(endpoint, options, requiresAuth);
        } else {
            if (process.env.NODE_ENV === 'development') {
                console.log('‚ùå √âchec du refresh token, session expir√©e');
            }
            
            // Nettoyer les tokens invalides
            clearTokens();
            
            // Notifier l'expiration de session (d√©clenche le modal)
            notifySessionExpired();
            
            // Lever une erreur pour arr√™ter le processus
            throw new Error("Session expir√©e. Veuillez vous reconnecter.");
        }
    }
    
    // R√©cup√©rer le type de contenu de la r√©ponse
    const contentType = response.headers.get("Content-Type") || "";
    
    // G√©rer les erreurs HTTP (status codes 4xx, 5xx)
    if (!response.ok) {
        // Tenter de parser l'erreur en JSON si possible
        const errorData = contentType.includes("application/json")
        ? await response.json().catch(() => ({}))
        : {};
        
        // Cr√©er une erreur avec le message du serveur ou le status text par d√©faut
        const error = new Error(`(${response.status}) ${errorData.detail || response.statusText}`);
        
        // Attacher les donn√©es d'erreur √† l'exception pour un debugging avanc√©
        (error as Error & { data: unknown }).data = errorData;
        
        throw error;
    }
    
    // Parser et retourner les donn√©es de la r√©ponse
    return contentType.includes("application/json")
        ? await response.json()      // Parser en JSON si le content-type l'indique
        : ({} as T);                 // Retourner un objet vide sinon
}

/**
 * Fonction utilitaire pour tenter de rafra√Æchir le token d'authentification
 * 
 * Cette fonction :
 * - Appelle le service de refresh token
 * - G√®re les erreurs de refresh (token expir√©, r√©seau, etc.)
 * - Retourne un bool√©en indiquant le succ√®s ou l'√©chec
 * 
 * @returns Promise<boolean> - true si le refresh a r√©ussi, false sinon
 */
async function tryRefreshToken(): Promise<boolean> {
  try {
    if (process.env.NODE_ENV === 'development') {
      console.log('üîÑ Tentative de refresh du token...');
    }
    
    // Appeler le service de refresh token
    await refreshToken();
    
    if (process.env.NODE_ENV === 'development') {
      console.log('‚úÖ Token refresh√© avec succ√®s');
    }
    
    return true;
  } catch (error) {
    if (process.env.NODE_ENV === 'development') {
      console.log('‚ùå √âchec du refresh token:', error);
    }
    
    // Si le refresh √©choue, c'est que le refresh token est aussi expir√©
    return false;
  }
}